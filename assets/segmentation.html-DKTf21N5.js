import{_ as a,c as t,a as s,o as n}from"./app-6pbiA5b1.js";const r={};function i(l,e){return n(),t("div",null,e[0]||(e[0]=[s(`<div style="text-align:center;"><img src="https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png" alt="Larvitar" height="200"></div><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>This guide covers the key concepts of segmentation mask management in Larvitar, utilizing the segmentation module of Cornerstone Tools. In this context, different volumetric data are represented as <strong>labelmaps</strong>, and each labelmap can contain multiple <strong>segments</strong>. A labelmap can support up to 2^16 segments.</p><p>The values within a labelmap correspond to specific <strong>labels</strong>, which determine the color from the LUT (Look-Up Table) used for visualization. These labels are assigned distinct colors and can be individually shown or hidden. Each labelmap can be associated with a different colormap and has an active/inactive property that influences the rendering style.</p><h3 id="key-terminology" tabindex="-1"><a class="header-anchor" href="#key-terminology"><span>Key Terminology</span></a></h3><ul><li><strong>Segmentation Mask (or Mask):</strong> A set of pixels representing a specific structure within a volume.</li><li><strong>Volume:</strong> A buffer that stores one or more segmentations.</li><li><strong>Label:</strong> A numerical identifier within a volume, corresponding to a specific segmentation.</li></ul><h3 id="useful-setters" tabindex="-1"><a class="header-anchor" href="#useful-setters"><span>Useful setters</span></a></h3><ul><li><p><strong>toggleSegmentVisibility:</strong></p><blockquote><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">setters<span class="token punctuation">.</span><span class="token function">toggleSegmentVisibility</span><span class="token punctuation">(</span>htmlelement<span class="token punctuation">,</span> segmentvalue<span class="token punctuation">,</span> labelmapid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote></li><li><p><strong>colorForSegmentIndexOfColorLUT:</strong></p><blockquote><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">setters<span class="token punctuation">.</span><span class="token function">colorForSegmentIndexOfColorLUT</span><span class="token punctuation">(</span></span>
<span class="line">  colorLutIndex<span class="token punctuation">,</span></span>
<span class="line">  segmentValue<span class="token punctuation">,</span></span>
<span class="line">  colorRGBAarray</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><h2 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference"><span>API Reference</span></a></h2><h3 id="initsegmentationmodule" tabindex="-1"><a class="header-anchor" href="#initsegmentationmodule"><span><code>initSegmentationModule</code></span></a></h3><p>A function to group all settings to load before masks</p><h4 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">initSegmentationModule</span><span class="token punctuation">(</span>customConfig<span class="token operator">:</span> SegmentationConfig<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>customConfig</code></td><td>SegmentationConfig</td><td>Object containing override values for segmentation module config</td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>void</code> - sets segmentation module configuration</p><h3 id="enablebrushtool" tabindex="-1"><a class="header-anchor" href="#enablebrushtool"><span><code>enableBrushTool</code></span></a></h3><p>To enable brush tools, user can call directly the <code>setToolEnabled</code> api. Otherwise, Larvitar implements the utility the function<code>enableBrushTool</code> that internally handle brush type and props with a single call.</p><h4 id="syntax-1" tabindex="-1"><a class="header-anchor" href="#syntax-1"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">enableBrushTool</span><span class="token punctuation">(</span>viewports<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">:</span> BrushProperties<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>viewports</code></td><td>string[]</td><td>Viewports Id list on which brush tool will be enabled</td></tr><tr><td><code>options</code></td><td>BrushProperties</td><td>Object containing configuration values (eg radius, thresholds, etc...)</td></tr></tbody></table><p>NOTE: if options contains <code>thresholds</code>, ThresholdsBrush is activated, otherwise BrushTool is activated.</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>&quot;ThresholdsBrush&quot; | &quot;Brush&quot;</code> - the activated tool name</p><h3 id="disablebrushtool" tabindex="-1"><a class="header-anchor" href="#disablebrushtool"><span><code>disableBrushTool</code></span></a></h3><p>To disable brush tools, user can call directly the <code>setToolDisabled</code> api. Otherwise, Larvitar implements the utility the function<code>disableBrushTool</code> that internally handle brush type and props with a single call.</p><h4 id="syntax-2" tabindex="-1"><a class="header-anchor" href="#syntax-2"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">disableBrushTool</span><span class="token punctuation">(</span>viewports<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> toolToActivate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>viewports</code></td><td>string[]</td><td>Viewports Id list on which brush tool will be disabled</td></tr><tr><td><code>options</code></td><td>string</td><td>The name of the tool to activate after removing the brush @optional</td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>void</code> - this function disables both brush tools, if found active on <code>viewports</code></p><h3 id="addsegmentationmask" tabindex="-1"><a class="header-anchor" href="#addsegmentationmask"><span><code>addSegmentationMask</code></span></a></h3><p>A function to group all settings to load before masks</p><h4 id="syntax-3" tabindex="-1"><a class="header-anchor" href="#syntax-3"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">addSegmentationMask</span><span class="token punctuation">(</span></span>
<span class="line">  props<span class="token operator">:</span> MaskProperties<span class="token punctuation">,</span></span>
<span class="line">  data<span class="token operator">:</span> TypedArray<span class="token punctuation">,</span></span>
<span class="line">  elementId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>customConfig</code></td><td>SegmentationConfig</td><td>Object containing override values for segmentation module config</td></tr><tr><td><code>customConfig</code></td><td>SegmentationConfig</td><td>Object containing override values for segmentation module config</td></tr><tr><td><code>customConfig</code></td><td>SegmentationConfig</td><td>Object containing override values for segmentation module config</td></tr></tbody></table><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3"><span>Returns</span></a></h4><p><code>void</code> - sets segmentation module configuration</p><h3 id="setlabelcolor" tabindex="-1"><a class="header-anchor" href="#setlabelcolor"><span><code>setLabelColor</code></span></a></h3><p>Sets a color for a certain label</p><h4 id="syntax-4" tabindex="-1"><a class="header-anchor" href="#syntax-4"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">setLabelColor</span><span class="token punctuation">(</span>labelId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>labelId</code></td><td>string</td><td>The identifier of the label whose color needs to be set.</td></tr><tr><td><code>color</code></td><td>string</td><td>The color value to be applied, typically in hexadecimal format (e.g., #FF5733).</td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4"><span>Returns</span></a></h4><p><code>void</code></p><h3 id="getlabelcolor" tabindex="-1"><a class="header-anchor" href="#getlabelcolor"><span><code>getLabelColor</code></span></a></h3><p>Gets the color for a certain label</p><h4 id="syntax-5" tabindex="-1"><a class="header-anchor" href="#syntax-5"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">getLabelColor</span><span class="token punctuation">(</span>labelId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>labelId</code></td><td>string</td><td>The identifier of the label whose color needs to be set.</td></tr></tbody></table><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5"><span>Returns</span></a></h4><p><code>string</code> - returns the color value for the label, typically in hexadecimal format</p><h3 id="loadmaskslice" tabindex="-1"><a class="header-anchor" href="#loadmaskslice"><span><code>loadMaskSlice</code></span></a></h3><p>Set a new mask slice into the labelmap buffer</p><h4 id="syntax-6" tabindex="-1"><a class="header-anchor" href="#syntax-6"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">loadMaskSlice</span><span class="token punctuation">(</span></span>
<span class="line">  elementId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement<span class="token punctuation">,</span></span>
<span class="line">  sliceIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  pixelData<span class="token operator">:</span> TypedArray</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>elementId</code></td><td>HTMLElement or string</td><td>The target html element Id or its DOM HTMLElement</td></tr><tr><td><code>sliceIndex</code></td><td>number</td><td>The index of the new mask slice</td></tr><tr><td><code>pixelData</code></td><td>TypedArray</td><td>The pixelData array</td></tr></tbody></table><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6"><span>Returns</span></a></h4><p><code>void</code></p><h3 id="setactivelabelmap" tabindex="-1"><a class="header-anchor" href="#setactivelabelmap"><span><code>setActiveLabelmap</code></span></a></h3><p>Activate a specific labelmap through its labelId</p><h4 id="syntax-7" tabindex="-1"><a class="header-anchor" href="#syntax-7"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">setActiveLabelmap</span><span class="token punctuation">(</span></span>
<span class="line">  labelId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  elementId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>labelId</code></td><td>number</td><td>The labelmap id to activate</td></tr><tr><td><code>elementId</code></td><td>string or HTMLElement</td><td>The target html element Id or its DOM HTMLElement</td></tr></tbody></table><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7"><span>Returns</span></a></h4><p><code>void</code></p><h3 id="getactivelabelmapbuffer" tabindex="-1"><a class="header-anchor" href="#getactivelabelmapbuffer"><span><code>getActiveLabelmapBuffer</code></span></a></h3><p>Get active labelmap for target element</p><h4 id="syntax-8" tabindex="-1"><a class="header-anchor" href="#syntax-8"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">getActiveLabelmapBuffer</span><span class="token punctuation">(</span>elementId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>elementId</code></td><td>stringg or HTMLElement</td><td>The target html element Id or its DOM HTMLElement</td></tr></tbody></table><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8"><span>Returns</span></a></h4><p><code>Object</code> - The active labelmap object that contains the buffer</p><h3 id="setactivesegment" tabindex="-1"><a class="header-anchor" href="#setactivesegment"><span><code>setActiveSegment</code></span></a></h3><p>Activate a specific segment through its index</p><h4 id="syntax-9" tabindex="-1"><a class="header-anchor" href="#syntax-9"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"> <span class="token function">setActiveSegment</span><span class="token punctuation">(</span></span>
<span class="line">  segmentIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  elementId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>segmentIndex</code></td><td>number</td><td>The segment index to activate</td></tr><tr><td><code>elementId</code></td><td>string or HTMLElement</td><td>The target html element Id or its DOM HTMLElement</td></tr></tbody></table><h4 id="returns-9" tabindex="-1"><a class="header-anchor" href="#returns-9"><span>Returns</span></a></h4><p><code>void</code></p><h3 id="setactivelabelopacity" tabindex="-1"><a class="header-anchor" href="#setactivelabelopacity"><span><code>setActiveLabelOpacity</code></span></a></h3><p>Change opacity for active label</p><h4 id="syntax-10" tabindex="-1"><a class="header-anchor" href="#syntax-10"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">setActiveLabelOpacity</span><span class="token punctuation">(</span>opacity<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>opacity</code></td><td>number</td><td>The desired opacity value</td></tr></tbody></table><h4 id="returns-10" tabindex="-1"><a class="header-anchor" href="#returns-10"><span>Returns</span></a></h4><p><code>void</code></p><h3 id="setinactivelabelopacity" tabindex="-1"><a class="header-anchor" href="#setinactivelabelopacity"><span><code>setInactiveLabelOpacity</code></span></a></h3><p>Change opacity for inactive labels</p><h4 id="syntax-11" tabindex="-1"><a class="header-anchor" href="#syntax-11"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">setInactiveLabelOpacity</span><span class="token punctuation">(</span>opacity<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>opacity</code></td><td>number</td><td>The desired opacity value</td></tr></tbody></table><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11"><span>Returns</span></a></h4><p><code>void</code></p><h3 id="togglevisibility" tabindex="-1"><a class="header-anchor" href="#togglevisibility"><span><code>toggleVisibility</code></span></a></h3><p>Toggle mask visibility</p><h4 id="syntax-12" tabindex="-1"><a class="header-anchor" href="#syntax-12"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">toggleVisibility</span><span class="token punctuation">(</span></span>
<span class="line">  elementId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement<span class="token punctuation">,</span></span>
<span class="line">  labelId<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-12" tabindex="-1"><a class="header-anchor" href="#parameters-12"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>elementId</code></td><td>string or HTMLElement</td><td>The target html element Id or its DOM HTMLElement</td></tr><tr><td><code>labelId</code></td><td>number</td><td>The id of the mask label</td></tr></tbody></table><h4 id="returns-12" tabindex="-1"><a class="header-anchor" href="#returns-12"><span>Returns</span></a></h4><p><code>void</code></p><h3 id="togglecontourmode" tabindex="-1"><a class="header-anchor" href="#togglecontourmode"><span><code>toggleContourMode</code></span></a></h3><p>Toggle between &#39;contours mode&#39; and &#39;filled mode&#39;</p><h4 id="syntax-13" tabindex="-1"><a class="header-anchor" href="#syntax-13"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">toggleContourMode</span><span class="token punctuation">(</span>toggle<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-13" tabindex="-1"><a class="header-anchor" href="#parameters-13"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>toggle</code></td><td>boolean</td><td>Contour mode enabled if true</td></tr></tbody></table><h4 id="returns-13" tabindex="-1"><a class="header-anchor" href="#returns-13"><span>Returns</span></a></h4><p><code>void</code> - forces a new render with chosen modality</p><h3 id="setmaskprops" tabindex="-1"><a class="header-anchor" href="#setmaskprops"><span><code>setMaskProps</code></span></a></h3><p>Set mask appearance props:</p><ul><li>labelId</li><li>visualization [0=filled, 1=contour, 2=hidden]</li><li>opacity (if mode=0), between 0 and 1</li></ul><h4 id="syntax-14" tabindex="-1"><a class="header-anchor" href="#syntax-14"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">setMaskProps</span><span class="token punctuation">(</span>props<span class="token operator">:</span> MaskProperties<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-14" tabindex="-1"><a class="header-anchor" href="#parameters-14"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>props</code></td><td>MaskProperties</td><td>The mask appearance props</td></tr></tbody></table><h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14"><span>Returns</span></a></h4><p><code>void</code> - forces a new render with chosen appearance props</p><h3 id="clearsegmentationstate" tabindex="-1"><a class="header-anchor" href="#clearsegmentationstate"><span><code>clearSegmentationState</code></span></a></h3><p>Clear state for segmentation module</p><h4 id="syntax-15" tabindex="-1"><a class="header-anchor" href="#syntax-15"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">clearSegmentationState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15"><span>Returns</span></a></h4><p><code>void</code></p><h3 id="setbrushprops" tabindex="-1"><a class="header-anchor" href="#setbrushprops"><span><code>setBrushProps</code></span></a></h3><p>Change the brush props:</p><ul><li>radius: number[px]</li><li>thresholds: array[min,max]</li></ul><h4 id="syntax-16" tabindex="-1"><a class="header-anchor" href="#syntax-16"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">setBrushProps</span><span class="token punctuation">(</span>props<span class="token operator">:</span> BrushProperties<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-15" tabindex="-1"><a class="header-anchor" href="#parameters-15"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>props</code></td><td>BrushProperties</td><td>The new brush props</td></tr></tbody></table><h4 id="returns-16" tabindex="-1"><a class="header-anchor" href="#returns-16"><span>Returns</span></a></h4><p><code>void</code> - forces a new render with chosen brush props</p><h3 id="undolaststroke" tabindex="-1"><a class="header-anchor" href="#undolaststroke"><span><code>undoLastStroke</code></span></a></h3><p>Undo last brush operation (stroke)</p><h4 id="syntax-17" tabindex="-1"><a class="header-anchor" href="#syntax-17"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">undoLastStroke</span><span class="token punctuation">(</span>elementId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-16" tabindex="-1"><a class="header-anchor" href="#parameters-16"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>elementId</code></td><td>string or HTMLElement</td><td>The target html element Id or its DOM HTMLElement</td></tr></tbody></table><h4 id="returns-17" tabindex="-1"><a class="header-anchor" href="#returns-17"><span>Returns</span></a></h4><p><code>void</code> - forces a new render with undone brush operations</p><h3 id="redolaststroke" tabindex="-1"><a class="header-anchor" href="#redolaststroke"><span><code>redoLastStroke</code></span></a></h3><p>Redo last brush operation (stroke)</p><h4 id="syntax-18" tabindex="-1"><a class="header-anchor" href="#syntax-18"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">redoLastStroke</span><span class="token punctuation">(</span>elementId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-17" tabindex="-1"><a class="header-anchor" href="#parameters-17"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>elementId</code></td><td>string or HTMLElement</td><td>The target html element Id or its DOM HTMLElement</td></tr></tbody></table><h4 id="returns-18" tabindex="-1"><a class="header-anchor" href="#returns-18"><span>Returns</span></a></h4><p><code>void</code> - forces a new render with redone brush operations</p><h3 id="deletemask" tabindex="-1"><a class="header-anchor" href="#deletemask"><span><code>deleteMask</code></span></a></h3><p>Delete mask from state</p><h4 id="syntax-19" tabindex="-1"><a class="header-anchor" href="#syntax-19"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">deleteMask</span><span class="token punctuation">(</span>labelId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-18" tabindex="-1"><a class="header-anchor" href="#parameters-18"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>labelId</code></td><td>number</td><td>The labelmap id to delete</td></tr></tbody></table><h4 id="returns-19" tabindex="-1"><a class="header-anchor" href="#returns-19"><span>Returns</span></a></h4><p><code>void</code> - forces a new render with deleted label</p><h3 id="setlabelmap3dbyfirstimageid" tabindex="-1"><a class="header-anchor" href="#setlabelmap3dbyfirstimageid"><span><code>setLabelmap3DByFirstImageId</code></span></a></h3><p>Takes an 16-bit encoded <code>ArrayBuffer</code> and stores it as a <code>Labelmap3D</code> for the <code>BrushStackState</code> associated with the firstImageId.</p><h4 id="syntax-20" tabindex="-1"><a class="header-anchor" href="#syntax-20"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">setLabelmap3DByFirstImageId</span><span class="token punctuation">(</span></span>
<span class="line">  firstImageId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  buffer<span class="token operator">:</span> ArrayBuffer<span class="token punctuation">,</span></span>
<span class="line">  labelmapIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  metadata<span class="token operator">:</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  numberOfFrames<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  segmentsOnLabelmapArray<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  colorLUTIndex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-19" tabindex="-1"><a class="header-anchor" href="#parameters-19"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>firstImageId</code></td><td>string</td><td>The firstImageId of the series to store the segmentation on.</td></tr><tr><td><code>buffer</code></td><td>ArrayBuffer</td><td>The array buffer to store as labelMap</td></tr><tr><td><code>labelmapIndex</code></td><td>number</td><td>The index to store the labelmap under.</td></tr><tr><td><code>metadata</code></td><td>Object[]</td><td>Any metadata about the segments.</td></tr><tr><td><code>numberOfFrames</code></td><td>number</td><td>The number of frames to set up the relevant labelmap2D views.</td></tr><tr><td><code>segmentsOnLabelmapArray</code></td><td>number[][]</td><td>An array of array of segments on each imageIdIndex.</td></tr><tr><td><code>colorLUTIndex</code></td><td>number</td><td>The index of the colorLUT to use to render the segmentation.</td></tr></tbody></table><h4 id="returns-20" tabindex="-1"><a class="header-anchor" href="#returns-20"><span>Returns</span></a></h4><p><code>Promise&lt;...&gt;</code> - the function is async</p><h3 id="setlabelmap3dforelement" tabindex="-1"><a class="header-anchor" href="#setlabelmap3dforelement"><span><code>setLabelmap3DForElement</code></span></a></h3><p>Takes a 16-bit encoded <code>ArrayBuffer</code> and stores it as a <code>Labelmap3D</code> for the <code>BrushStackState</code> associated with the element.</p><h4 id="syntax-21" tabindex="-1"><a class="header-anchor" href="#syntax-21"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">setLabelmap3DForElement</span><span class="token punctuation">(</span></span>
<span class="line">  elementOrEnabledElementUID<span class="token operator">:</span> EnabledElement <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  buffer<span class="token operator">:</span> ArrayBuffer<span class="token punctuation">,</span></span>
<span class="line">  labelmapIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  metadata<span class="token operator">:</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  segmentsOnLabelmapArray<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  colorLUTIndex <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-20" tabindex="-1"><a class="header-anchor" href="#parameters-20"><span>Parameters</span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>elementOrEnabledElementUID</code></td><td>EnabledElement</td><td>The firstImageId of the series to store the segmentation on.</td></tr><tr><td><code>buffer</code></td><td>ArrayBuffer</td><td>The array buffer to store as labelMap</td></tr><tr><td><code>labelmapIndex</code></td><td>number</td><td>The index to store the labelmap under.</td></tr><tr><td><code>metadata</code></td><td>Object[]</td><td>Any metadata about the segments.</td></tr><tr><td><code>segmentsOnLabelmapArray</code></td><td>number[][]</td><td>An array of array of segments on each imageIdIndex.</td></tr><tr><td><code>colorLUTIndex</code></td><td>number</td><td>The index of the colorLUT to use to render the segmentation.</td></tr></tbody></table><h4 id="returns-21" tabindex="-1"><a class="header-anchor" href="#returns-21"><span>Returns</span></a></h4><p><code>Promise&lt;...&gt;</code> - the function is async <br></p><div style="text-align:center;"><img src="https://press.r1-it.storage.cloud.it/logo_trasparent.png" alt="D/Vision Lab" height="200"></div> \`\`\`\` `,188)]))}const d=a(r,[["render",i],["__file","segmentation.html.vue"]]),p=JSON.parse('{"path":"/api/modules/tools/segmentation.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[{"level":3,"title":"Key Terminology","slug":"key-terminology","link":"#key-terminology","children":[]},{"level":3,"title":"Useful setters","slug":"useful-setters","link":"#useful-setters","children":[]}]},{"level":2,"title":"API Reference","slug":"api-reference","link":"#api-reference","children":[{"level":3,"title":"initSegmentationModule","slug":"initsegmentationmodule","link":"#initsegmentationmodule","children":[]},{"level":3,"title":"enableBrushTool","slug":"enablebrushtool","link":"#enablebrushtool","children":[]},{"level":3,"title":"disableBrushTool","slug":"disablebrushtool","link":"#disablebrushtool","children":[]},{"level":3,"title":"addSegmentationMask","slug":"addsegmentationmask","link":"#addsegmentationmask","children":[]},{"level":3,"title":"setLabelColor","slug":"setlabelcolor","link":"#setlabelcolor","children":[]},{"level":3,"title":"getLabelColor","slug":"getlabelcolor","link":"#getlabelcolor","children":[]},{"level":3,"title":"loadMaskSlice","slug":"loadmaskslice","link":"#loadmaskslice","children":[]},{"level":3,"title":"setActiveLabelmap","slug":"setactivelabelmap","link":"#setactivelabelmap","children":[]},{"level":3,"title":"getActiveLabelmapBuffer","slug":"getactivelabelmapbuffer","link":"#getactivelabelmapbuffer","children":[]},{"level":3,"title":"setActiveSegment","slug":"setactivesegment","link":"#setactivesegment","children":[]},{"level":3,"title":"setActiveLabelOpacity","slug":"setactivelabelopacity","link":"#setactivelabelopacity","children":[]},{"level":3,"title":"setInactiveLabelOpacity","slug":"setinactivelabelopacity","link":"#setinactivelabelopacity","children":[]},{"level":3,"title":"toggleVisibility","slug":"togglevisibility","link":"#togglevisibility","children":[]},{"level":3,"title":"toggleContourMode","slug":"togglecontourmode","link":"#togglecontourmode","children":[]},{"level":3,"title":"setMaskProps","slug":"setmaskprops","link":"#setmaskprops","children":[]},{"level":3,"title":"clearSegmentationState","slug":"clearsegmentationstate","link":"#clearsegmentationstate","children":[]},{"level":3,"title":"setBrushProps","slug":"setbrushprops","link":"#setbrushprops","children":[]},{"level":3,"title":"undoLastStroke","slug":"undolaststroke","link":"#undolaststroke","children":[]},{"level":3,"title":"redoLastStroke","slug":"redolaststroke","link":"#redolaststroke","children":[]},{"level":3,"title":"deleteMask","slug":"deletemask","link":"#deletemask","children":[]},{"level":3,"title":"setLabelmap3DByFirstImageId","slug":"setlabelmap3dbyfirstimageid","link":"#setlabelmap3dbyfirstimageid","children":[]},{"level":3,"title":"setLabelmap3DForElement","slug":"setlabelmap3dforelement","link":"#setlabelmap3dforelement","children":[]}]}],"git":{"updatedTime":1759672351000,"contributors":[{"name":"Laura Borghesi","username":"Laura Borghesi","email":"146220917+laura-borghesi-lum00n@users.noreply.github.com","commits":1,"url":"https://github.com/Laura Borghesi"}]},"filePathRelative":"api/modules/tools/segmentation.md","excerpt":"<div style=\\"text-align: center;\\">\\n    <img src=\\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png\\" alt=\\"Larvitar\\" height=\\"200\\">\\n</div>\\n<h2>Introduction</h2>\\n<p>This guide covers the key concepts of segmentation mask management in Larvitar, utilizing the segmentation module of Cornerstone Tools. In this context, different volumetric data are represented as <strong>labelmaps</strong>, and each labelmap can contain multiple <strong>segments</strong>. A labelmap can support up to 2^16 segments.</p>"}');export{d as comp,p as data};
