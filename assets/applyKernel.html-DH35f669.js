import{_ as a,c as n,a as s,o as t}from"./app-6pbiA5b1.js";const l={};function i(r,e){return t(),n("div",null,e[0]||(e[0]=[s(`<div style="text-align:center;"><img src="https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png" alt="Larvitar" height="200"></div><h2 id="kernel-convolution-for-image-processing" tabindex="-1"><a class="header-anchor" href="#kernel-convolution-for-image-processing"><span>Kernel Convolution for Image Processing</span></a></h2><p>Convolution is a fundamental operation in image processing that modifies an image by applying a mathematical operator called a <strong>kernel</strong>. A kernel is a small matrix of numbers that is passed over the entire image. The value of each pixel is recalculated based on the values of its neighbors, as defined by the kernel.</p><p>This technique allows for a wide variety of image filtering effects, such as:</p><ul><li><strong>Blurring:</strong> Averaging pixel values to create a smoother image.</li><li><strong>Sharpening:</strong> Accentuating differences between pixels to enhance edges.</li><li><strong>Edge Detection:</strong> Highlighting the boundaries between different regions of an image.</li><li><strong>Embossing:</strong> Giving the image a raised, 3D appearance.</li></ul><p>This module provides a robust framework for defining, managing, and applying convolution kernels to digital images.</p><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h2><p>The core of the functionality is a <code>convolve</code> algorithm that systematically applies the kernel to every pixel of the source image.</p><ol><li>The kernel is centered over a target pixel.</li><li>Each value in the kernel is multiplied by the corresponding pixel value underneath it.</li><li>All the products are summed up to get the new value for the target pixel.</li><li>This process is repeated for every pixel in the image to produce the final filtered image.</li></ol><p>Boundary conditions (for pixels at the image edges) are handled by clamping the coordinates, ensuring the kernel can operate on the entire image.</p><h2 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference"><span>API Reference</span></a></h2><h3 id="applyconvolutionfilter" tabindex="-1"><a class="header-anchor" href="#applyconvolutionfilter"><span><code>applyConvolutionFilter</code></span></a></h3><p>Applies a named convolution kernel from the kernel library to a given image. This is the primary function for executing a filtering operation.</p><h4 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">applyConvolutionFilter</span><span class="token punctuation">(</span></span>
<span class="line">  loadedImage<span class="token operator">:</span> Image<span class="token punctuation">,</span></span>
<span class="line">  filterName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  generateImage<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  multiplier<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span> <span class="token operator">|</span> TypedArray</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>loadedImage</code></td><td style="text-align:left;"><code>Image</code></td><td style="text-align:left;">The source image object to be filtered.</td></tr><tr><td style="text-align:left;"><code>filterName</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The name of the kernel to apply (e.g., <code>edgeDetect</code>).</td></tr><tr><td style="text-align:left;"><code>generateImage</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;"><strong>Optional.</strong> If <code>true</code>, returns a new <code>Image</code> object. If <code>false</code> (default), returns only the <code>TypedArray</code> of filtered pixel data.</td></tr><tr><td style="text-align:left;"><code>multiplier</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;"><strong>Optional.</strong> A scaling factor to apply to the kernel&#39;s values during convolution (default: <code>1</code>).</td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h4><p><code>Partial&lt;Image&gt; | TypedArray</code> â€“ Returns a new, partial <code>Image</code> object containing the filtered result, or the raw <code>TypedArray</code> of pixel data.</p><hr><h3 id="addcustomkernel" tabindex="-1"><a class="header-anchor" href="#addcustomkernel"><span><code>addCustomKernel</code></span></a></h3><p>Adds a new, user-defined kernel to the global library of available filters, making it accessible to <code>applyConvolutionFilter</code>.</p><h4 id="syntax-1" tabindex="-1"><a class="header-anchor" href="#syntax-1"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">addCustomKernel</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> config<span class="token operator">:</span> KernelConfig<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">A unique name to identify the new kernel.</td></tr><tr><td style="text-align:left;"><code>config</code></td><td style="text-align:left;"><code>KernelConfig</code></td><td style="text-align:left;">An object with the kernel&#39;s configuration: <code>{ label: string, size: number, kernel: number[][] }</code>.</td></tr></tbody></table><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>void</code></p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// Define a 3x3 sharpening kernel</span></span>
<span class="line"><span class="token keyword">const</span> sharpenConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  label<span class="token operator">:</span> <span class="token string">&quot;Sharpen 3x3&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  size<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">  kernel<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add the kernel to the library with the name &quot;sharpen&quot;</span></span>
<span class="line"><span class="token function">addCustomKernel</span><span class="token punctuation">(</span><span class="token string">&quot;sharpen&quot;</span><span class="token punctuation">,</span> sharpenConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The &quot;sharpen&quot; filter can now be used</span></span>
<span class="line"><span class="token keyword">const</span> sharpenedImage <span class="token operator">=</span> <span class="token function">applyConvolutionFilter</span><span class="token punctuation">(</span>myImage<span class="token punctuation">,</span> <span class="token string">&quot;sharpen&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="getkernels" tabindex="-1"><a class="header-anchor" href="#getkernels"><span><code>getKernels</code></span></a></h3><p>Retrieves the complete object containing all currently defined convolution kernels.</p><h4 id="syntax-2" tabindex="-1"><a class="header-anchor" href="#syntax-2"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">getKernels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> KernelConfig <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2"><span>Returns</span></a></h4><p><code>{ [key: string]: KernelConfig }</code> â€“ A copy of the internal <code>CONVOLUTION_KERNELS</code> object.</p><hr><h3 id="applygaussianblur" tabindex="-1"><a class="header-anchor" href="#applygaussianblur"><span><code>applyGaussianBlur</code></span></a></h3><p>Applies a Gaussian blur filter with dynamically generated kernel to a cornerstone image. This function generates the appropriate Gaussian kernel based on the specified parameters and applies it to create a smooth blurring effect.</p><h4 id="syntax-3" tabindex="-1"><a class="header-anchor" href="#syntax-3"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">applyGaussianBlur</span><span class="token punctuation">(</span></span>
<span class="line">  loadedImage<span class="token operator">:</span> Image<span class="token punctuation">,</span></span>
<span class="line">  kernelSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  strength<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>loadedImage</code></td><td style="text-align:left;"><code>Image</code></td><td style="text-align:left;">The source cornerstone image object to be blurred.</td></tr><tr><td style="text-align:left;"><code>kernelSize</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The size of the kernel (must be an odd number â‰¥ 3).</td></tr><tr><td style="text-align:left;"><code>strength</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The sigma value for the Gaussian function, controlling blur intensity.</td></tr></tbody></table><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3"><span>Returns</span></a></h4><p><code>Partial&lt;Image&gt;</code> â€“ A new, partial <code>Image</code> object containing the blurred result.</p><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// Apply a 5x5 Gaussian blur with sigma of 1.5</span></span>
<span class="line"><span class="token keyword">const</span> blurredImage <span class="token operator">=</span> <span class="token function">applyGaussianBlur</span><span class="token punctuation">(</span>myImage<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="applysharpening" tabindex="-1"><a class="header-anchor" href="#applysharpening"><span><code>applySharpening</code></span></a></h3><p>Applies a sharpening filter with dynamically generated kernel to a cornerstone image. This function creates an appropriate sharpening kernel based on the specified parameters to enhance edge definition and image clarity.</p><h4 id="syntax-4" tabindex="-1"><a class="header-anchor" href="#syntax-4"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">applySharpening</span><span class="token punctuation">(</span></span>
<span class="line">  loadedImage<span class="token operator">:</span> Image<span class="token punctuation">,</span></span>
<span class="line">  kernelSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  strength<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters</span></a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>loadedImage</code></td><td style="text-align:left;"><code>Image</code></td><td style="text-align:left;">The source cornerstone image object to be sharpened.</td></tr><tr><td style="text-align:left;"><code>kernelSize</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The size of the kernel (must be an odd number â‰¥ 3).</td></tr><tr><td style="text-align:left;"><code>strength</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The strength of the sharpening effect (higher values = more sharpening).</td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4"><span>Returns</span></a></h4><p><code>Partial&lt;Image&gt;</code> â€“ A new, partial <code>Image</code> object containing the sharpened result.</p><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2"><span>Example</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// Apply a 3x3 sharpening filter with moderate strength</span></span>
<span class="line"><span class="token keyword">const</span> sharpenedImage <span class="token operator">=</span> <span class="token function">applySharpening</span><span class="token punctuation">(</span>myImage<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="createfilteredimage" tabindex="-1"><a class="header-anchor" href="#createfilteredimage"><span><code>createFilteredImage</code></span></a></h3><p>A utility function that constructs a new <code>Image</code> object from an array of filtered pixel data. It uses the original image as a template for metadata (e.g., dimensions, slope, intercept) and calculates new values for properties like <code>minPixelValue</code>, <code>maxPixelValue</code>, and <code>windowCenter</code>.</p><h4 id="syntax-5" tabindex="-1"><a class="header-anchor" href="#syntax-5"><span>Syntax</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">createFilteredImage</span><span class="token punctuation">(</span></span>
<span class="line">  loadedImage<span class="token operator">:</span> Image<span class="token punctuation">,</span></span>
<span class="line">  filteredPixelArray<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h4><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>loadedImage</code></td><td style="text-align:left;"><code>Image</code></td><td style="text-align:left;">The original image, used as a source for metadata.</td></tr><tr><td style="text-align:left;"><code>filteredPixelArray</code></td><td style="text-align:left;"><code>number[]</code></td><td style="text-align:left;">The array of pixel data for the new, filtered image.</td></tr></tbody></table><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5"><span>Returns</span></a></h4><p><code>Partial&lt;Image&gt;</code> â€“ A new, partial <code>Image</code> object ready for rendering.</p><h2 id="internal-functions" tabindex="-1"><a class="header-anchor" href="#internal-functions"><span>Internal Functions</span></a></h2><ul><li><strong><code>convolve</code></strong>: The core algorithm that performs the mathematical convolution. It iterates over image pixels, applies the kernel weights, and handles boundary logic.</li><li><strong><code>getTypedArrayConstructor</code></strong>: A helper utility that inspects the input image&#39;s pixel data to select the correct <code>TypedArray</code> constructor (e.g., <code>Int16Array</code>, <code>Uint8Array</code>) for the output. This preserves the numerical precision and data type of the original image.</li><li><strong><code>generateGaussianKernel</code></strong>: Generates a Gaussian kernel matrix for blurring operations based on size and sigma parameters.</li><li><strong><code>generateSharpenKernel</code></strong>: Generates a sharpening kernel matrix based on size and strength parameters.</li></ul><div style="text-align:center;"><img src="https://press.r1-it.storage.cloud.it/logo_trasparent.png" alt="D/Vision Lab" height="200"></div>`,71)]))}const p=a(l,[["render",i],["__file","applyKernel.html.vue"]]),c=JSON.parse('{"path":"/api/modules/postProcessing/applyKernel.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Kernel Convolution for Image Processing","slug":"kernel-convolution-for-image-processing","link":"#kernel-convolution-for-image-processing","children":[]},{"level":2,"title":"How It Works","slug":"how-it-works","link":"#how-it-works","children":[]},{"level":2,"title":"API Reference","slug":"api-reference","link":"#api-reference","children":[{"level":3,"title":"applyConvolutionFilter","slug":"applyconvolutionfilter","link":"#applyconvolutionfilter","children":[]},{"level":3,"title":"addCustomKernel","slug":"addcustomkernel","link":"#addcustomkernel","children":[]},{"level":3,"title":"getKernels","slug":"getkernels","link":"#getkernels","children":[]},{"level":3,"title":"applyGaussianBlur","slug":"applygaussianblur","link":"#applygaussianblur","children":[]},{"level":3,"title":"applySharpening","slug":"applysharpening","link":"#applysharpening","children":[]},{"level":3,"title":"createFilteredImage","slug":"createfilteredimage","link":"#createfilteredimage","children":[]}]},{"level":2,"title":"Internal Functions","slug":"internal-functions","link":"#internal-functions","children":[]}],"git":{"updatedTime":1759672351000,"contributors":[{"name":"Laura Borghesi","username":"Laura Borghesi","email":"146220917+laura-borghesi-lum00n@users.noreply.github.com","commits":1,"url":"https://github.com/Laura Borghesi"}]},"filePathRelative":"api/modules/postProcessing/applyKernel.md","excerpt":"<div style=\\"text-align: center;\\">\\n    <img src=\\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png\\" alt=\\"Larvitar\\" height=\\"200\\">\\n</div>\\n<h2>Kernel Convolution for Image Processing</h2>\\n<p>Convolution is a fundamental operation in image processing that modifies an image by applying a mathematical operator called a <strong>kernel</strong>. A kernel is a small matrix of numbers that is passed over the entire image. The value of each pixel is recalculated based on the values of its neighbors, as defined by the kernel.</p>"}');export{p as comp,c as data};
