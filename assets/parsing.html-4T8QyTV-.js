import{_ as r,c as o,a as l,b as e,e as s,f as i,d as t,r as d,o as u}from"./app-6pbiA5b1.js";const p={};function m(g,n){const a=d("RouteLink");return u(),o("div",null,[n[102]||(n[102]=l(`<div style="text-align:center;"><img src="https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png" alt="Larvitar" height="200"></div><h2 id="parsing-a-dicom-file" tabindex="-1"><a class="header-anchor" href="#parsing-a-dicom-file"><span>Parsing a DICOM File</span></a></h2><p>Parsing a DICOM file is the first step in handling medical imaging data with Larvitar. It allows you to extract metadata and organize the data into a structured format. Larvitar uses the <a href="https://github.com/cornerstonejs/dicomParser" target="_blank" rel="noopener noreferrer">dicomParser library</a> to read and parse DICOM files efficiently.</p><h3 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h3><p>You can parse:</p><ul><li><strong>A single DICOM file</strong>: Ideal for simple workflows where you need to analyze one image.</li><li><strong>A list of DICOM files</strong>: Useful for handling series of images, such as those in CT or MRI datasets.</li></ul><p>After parsing, Larvitar returns a structured data object where the key is a uniqueId, and the value is an object containing detailed characteristics such as metadata and other information. This structure follows the Series type, which you can explore <a href="https://github.com/dvisionlab/Larvitar/blob/master/imaging/types.d.ts#L160" target="_blank" rel="noopener noreferrer">here</a>.</p><p>The main logic for parsing is implemented in Larvitar&#39;s <a href="https://github.com/dvisionlab/Larvitar/blob/master/imaging/imageParsing.ts" target="_blank" rel="noopener noreferrer">imageParsing.ts</a> file.</p><p>In addition to parsing, Larvitar also provides an utility function (<code>convertQidoMetadata</code>) for converting QIDO responses to Metadata objects. This function help streamline data processing.</p><h3 id="parsing-api" tabindex="-1"><a class="header-anchor" href="#parsing-api"><span>Parsing API</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> readFile<span class="token punctuation">,</span> readFiles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;larvitar&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Read a single DICOM file</span></span>
<span class="line"><span class="token function">readFile</span><span class="token punctuation">(</span>file<span class="token operator">:</span>File<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>series<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Parsed series:&#39;</span><span class="token punctuation">,</span> series<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Read multiple DICOM files</span></span>
<span class="line"><span class="token function">readFiles</span><span class="token punctuation">(</span>files<span class="token operator">:</span>File<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>series<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Parsed series:&#39;</span><span class="token punctuation">,</span> series<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// convert a QIDO response to a Metadata object</span></span>
<span class="line"><span class="token keyword">const</span> metadata<span class="token operator">:</span> Metadata <span class="token operator">=</span> <span class="token function">convertQidoMetadata</span><span class="token punctuation">(</span>data<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="structure-of-a-series-object" tabindex="-1"><a class="header-anchor" href="#structure-of-a-series-object"><span>Structure of a Series Object</span></a></h2><p>The Series type defines the structure of parsed DICOM data. Here are the main properties of the object:</p>`,13)),e("table",null,[n[53]||(n[53]=e("thead",null,[e("tr",null,[e("th",null,"Property"),e("th",null,"Description"),e("th",null,"Explanation")])],-1)),e("tbody",null,[n[36]||(n[36]=e("tr",null,[e("td",null,[e("code",null,"currentImageIdIndex")]),e("td",null,"Index of the current image in the series"),e("td",null,"-")],-1)),e("tr",null,[n[1]||(n[1]=e("td",null,[e("code",null,"imageIds")],-1)),n[2]||(n[2]=e("td",null,"Array of imageIds in the series generated by the loader",-1)),e("td",null,[s(a,{to:"/api/parsing.html#imageids"},{default:i(()=>n[0]||(n[0]=[t("Link")])),_:1})])]),e("tr",null,[n[4]||(n[4]=e("td",null,[e("code",null,"instanceUIDs")],-1)),n[5]||(n[5]=e("td",null,"Map of SopInstanceUID and ImageId, ordered",-1)),e("td",null,[s(a,{to:"/api/parsing.html#instanceuids"},{default:i(()=>n[3]||(n[3]=[t("Link")])),_:1})])]),e("tr",null,[n[7]||(n[7]=e("td",null,[e("code",null,"instances")],-1)),n[8]||(n[8]=e("td",null,"Map of imageId and parsed dicom file object",-1)),e("td",null,[s(a,{to:"/api/parsing.html#instances"},{default:i(()=>n[6]||(n[6]=[t("Link")])),_:1})])]),n[37]||(n[37]=e("tr",null,[e("td",null,[e("code",null,"seriesDescription")]),e("td",null,"Description of the series."),e("td",null,"(0008,103e)")],-1)),e("tr",null,[n[10]||(n[10]=e("td",null,[e("code",null,"uniqueUID")],-1)),n[11]||(n[11]=e("td",null,"Unique identifier for the series.",-1)),e("td",null,[s(a,{to:"/api/parsing.html#larvitar-unique-uid"},{default:i(()=>n[9]||(n[9]=[t("Link")])),_:1})])]),n[38]||(n[38]=e("tr",null,[e("td",null,[e("code",null,"seriesUID")]),e("td",null,"Unique identifier for the series."),e("td",null,"(0020,000e)")],-1)),n[39]||(n[39]=e("tr",null,[e("td",null,[e("code",null,"studyUID")]),e("td",null,"Unique identifier for the study"),e("td",null,"(0020,000d)")],-1)),n[40]||(n[40]=e("tr",null,[e("td",null,[e("code",null,"numberOfImages")]),e("td",null,"Number of images in the series"),e("td",null,"-")],-1)),n[41]||(n[41]=e("tr",null,[e("td",null,[e("code",null,"numberOfSlices")]),e("td",null,"Number of slices in the series"),e("td",null,"(0054,0081)")],-1)),n[42]||(n[42]=e("tr",null,[e("td",null,[e("code",null,"numberOfFrames")]),e("td",null,"Number of frames in the series"),e("td",null,"(0028,0008)")],-1)),n[43]||(n[43]=e("tr",null,[e("td",null,[e("code",null,"numberOfTemporalPositions")]),e("td",null,"Number of temporal positions in the series"),e("td",null,"(0020,0105)")],-1)),n[44]||(n[44]=e("tr",null,[e("td",null,[e("code",null,"isMultiFrame")]),e("td",null,"True if the series contains multiple frames"),e("td",null,"(0028,0008) > 1")],-1)),n[45]||(n[45]=e("tr",null,[e("td",null,[e("code",null,"waveform")]),e("td",null,"True if the series has ecg trace data"),e("td",null,"(5000,3000) is True")],-1)),n[46]||(n[46]=e("tr",null,[e("td",null,[e("code",null,"is4D")]),e("td",null,"True if the series is 4D (3D + time)"),e("td",null,"(0020,0105) > 1")],-1)),n[47]||(n[47]=e("tr",null,[e("td",null,[e("code",null,"isPDF")]),e("td",null,"True if the series is a PDF"),e("td",null,"(0008,0016) == 1.2.840.10008.5.1.4.1.1.104.1")],-1)),e("tr",null,[n[13]||(n[13]=e("td",null,[e("code",null,"anonymized")],-1)),n[14]||(n[14]=e("td",null,"True if the series is anonymized",-1)),e("td",null,[s(a,{to:"/api/modules/utilities/anonymization.html"},{default:i(()=>n[12]||(n[12]=[t("Anonymization")])),_:1})])]),n[48]||(n[48]=e("tr",null,[e("td",null,[e("code",null,"modality")]),e("td",null,"Modality of the series"),e("td",null,"(0008,0060)")],-1)),n[49]||(n[49]=e("tr",null,[e("td",null,[e("code",null,"color")]),e("td",null,"True if the series is colored and not grayscale"),e("td",null,"(0028,0004)")],-1)),e("tr",null,[n[16]||(n[16]=e("td",null,[e("code",null,"bytes")],-1)),n[17]||(n[17]=e("td",null,"Number of allocated bytes for the series",-1)),e("td",null,[s(a,{to:"/api/parsing.html#bytes"},{default:i(()=>n[15]||(n[15]=[t("Link")])),_:1})])]),e("tr",null,[n[19]||(n[19]=e("td",null,[e("code",null,"stagedProtocol")],-1)),n[20]||(n[20]=e("td",null,"Contains stress echo staged protocol (optional)",-1)),e("td",null,[s(a,{to:"/api/modules/utilities/stressEchoProtocol.html"},{default:i(()=>n[18]||(n[18]=[t("Stress Echo")])),_:1})])]),e("tr",null,[n[22]||(n[22]=e("td",null,[e("code",null,"dataSet")],-1)),n[23]||(n[23]=e("td",null,"The parsed DICOM dataset for the series (optional)",-1)),e("td",null,[s(a,{to:"/api/parsing.html#dataset"},{default:i(()=>n[21]||(n[21]=[t("Link")])),_:1})])]),e("tr",null,[n[25]||(n[25]=e("td",null,[e("code",null,"metadata")],-1)),n[26]||(n[26]=e("td",null,"Metadata extracted from the DICOM file (optional)",-1)),e("td",null,[s(a,{to:"/api/parsing.html#metadata"},{default:i(()=>n[24]||(n[24]=[t("Link")])),_:1})])]),n[50]||(n[50]=e("tr",null,[e("td",null,[e("code",null,"frameDelay")]),e("td",null,"Delay between frames in a multiframe series (optional)"),e("td",null,"(0018,1066)")],-1)),n[51]||(n[51]=e("tr",null,[e("td",null,[e("code",null,"frameTime")]),e("td",null,"Time between frames in a multiframe series (optional)"),e("td",null,"(0018,1063)")],-1)),n[52]||(n[52]=e("tr",null,[e("td",null,[e("code",null,"rWaveTimeVector")]),e("td",null,"Time vector for R-wave synchronization (optional)"),e("td",null,"(0018,6060)")],-1)),e("tr",null,[n[28]||(n[28]=e("td",null,[e("code",null,"ecgData")],-1)),n[29]||(n[29]=e("td",null,"ECG data for the series (optional)",-1)),e("td",null,[s(a,{to:"/api/modules/visualizations/ecg.html"},{default:i(()=>n[27]||(n[27]=[t("ECG")])),_:1})])]),e("tr",null,[n[31]||(n[31]=e("td",null,[e("code",null,"traceData")],-1)),n[32]||(n[32]=e("td",null,"Trace data for the series (optional)",-1)),e("td",null,[s(a,{to:"/api/modules/visualizations/ecg.html"},{default:i(()=>n[30]||(n[30]=[t("ECG")])),_:1})])]),e("tr",null,[n[34]||(n[34]=e("td",null,[e("code",null,"dsa")],-1)),n[35]||(n[35]=e("td",null,"Contains DSA data, if exists (optional)",-1)),e("td",null,[s(a,{to:"/api/modules/postProcessing/dsa.html"},{default:i(()=>n[33]||(n[33]=[t("DSA")])),_:1})])])])]),n[103]||(n[103]=l('<h3 id="larvitar-unique-uid" tabindex="-1"><a class="header-anchor" href="#larvitar-unique-uid"><span>Larvitar Unique UID</span></a></h3><p>The <code>uniqueUID</code> is a unique identifier generated by Larvitar to represent a set of DICOM images in the application. It is used internally to group and manage series effectively. Unlike the DICOM standard&#39;s SeriesInstanceUID, this identifier is tailored for Larvitar’s internal workflows and ensures consistency in handling specific scenarios, such as single-frame modalities.</p><h4 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h4><ol><li><p><strong>Grouping by SeriesInstanceUID</strong>:</p><ul><li>Typically, images with the same <code>SeriesInstanceUID</code> (as defined by the DICOM standard) belong to the same series. Larvitar uses this value to group instances into series.</li></ul></li><li><p><strong>Single-Frame Modalities</strong>:</p><ul><li>For certain modalities that are inherently single-frame, Larvitar uses the <code>SOPInstanceUID</code> as the unique identifier instead of the <code>SeriesInstanceUID</code>. This ensures that each single-frame image is treated as its own series.</li></ul></li></ol><p>The following modalities, identified by the DICOM tag (0008,0060), are considered single-frame modalities in Larvitar:</p><table><thead><tr><th>Modality</th><th>Description</th></tr></thead><tbody><tr><td><code>CR</code></td><td>Computed Radiography</td></tr><tr><td><code>DX</code></td><td>Digital Radiography</td></tr><tr><td><code>MG</code></td><td>Mammography</td></tr><tr><td><code>PX</code></td><td>Panoramic X-ray</td></tr><tr><td><code>RF</code></td><td>Radio Fluoroscopy</td></tr><tr><td><code>XA</code></td><td>X-ray Angiography</td></tr><tr><td><code>US</code></td><td>Ultrasound</td></tr><tr><td><code>IVUS</code></td><td>Intravascular Ultrasound</td></tr><tr><td><code>OCT</code></td><td>Optical Coherence Tomography</td></tr><tr><td><code>SR</code></td><td>Structured Report</td></tr></tbody></table><p>For these modalities, each instance is treated as its own unique series by setting the <code>uniqueUID</code> to the <code>SOPInstanceUID</code> .</p><h4 id="key-points-to-remember" tabindex="-1"><a class="header-anchor" href="#key-points-to-remember"><span>Key Points to Remember</span></a></h4><ul><li><p><strong>Purpose of the Larvitar Unique UID</strong>:</p><ul><li>It provides a consistent way to manage series across various scenarios in Larvitar.</li><li>It simplifies grouping by ensuring single-frame modalities are treated uniquely.</li></ul></li><li><p><strong>Relation to SeriesInstanceUID</strong>:</p><ul><li>When available and appropriate, the DICOM <code>SeriesInstanceUID</code> is used for grouping images.</li><li>For single-frame modalities, the <code>SOPInstanceUID</code> is used instead.</li></ul></li></ul><h3 id="imageids" tabindex="-1"><a class="header-anchor" href="#imageids"><span>ImageIds</span></a></h3>',10)),e("p",null,[n[55]||(n[55]=t("The ")),n[56]||(n[56]=e("code",null,"imageIds",-1)),n[57]||(n[57]=t(" array is a collection of identifiers generated by a DICOM ")),s(a,{to:"/api/loading.html"},{default:i(()=>n[54]||(n[54]=[t("image loader")])),_:1}),n[58]||(n[58]=t(" for each image in a series. These identifiers are crucial for locating, loading, and managing images within the viewer. Larvitar ensures that the ")),n[59]||(n[59]=e("code",null,"imageIds",-1)),n[60]||(n[60]=t(" array is ordered to facilitate logical image navigation and proper visualization."))]),n[104]||(n[104]=l('<h4 id="ordering-logic" tabindex="-1"><a class="header-anchor" href="#ordering-logic"><span>Ordering Logic</span></a></h4><p>The imageIds array is ordered based on the following DICOM tags:</p><ol><li><p><strong>Primary Ordering</strong>: <code>InstanceNumber</code> (0020,0013)</p><ul><li>If the <code>InstanceNumber</code> exists in the DICOM metadata, the <code>imageIds</code> array is sorted by this value.</li><li>The <code>InstanceNumber</code> tag is commonly used to indicate the order of images within a series.</li></ul></li><li><p><strong>Fallback Ordering</strong>: <code>ImagePositionPatient</code> (0020,0032)</p><ul><li>If the <code>InstanceNumber</code> is missing or inconsistent, the array is ordered by the <code>ImagePositionPatient</code>, which specifies the 3D spatial position of the image.</li><li>This ensures images are ordered logically based on their position in space.</li></ul></li><li><p><strong>Additional Ordering</strong> for 4D Data: <code>ContentTime</code> (0008,0033)</p><ul><li>For 4D datasets, such as dynamic MRI or CT, an additional level of ordering is applied.</li><li>After ordering by <code>InstanceNumber</code> or <code>ImagePositionPatient</code>, the array is further sorted by <code>ContentTime</code>, which specifies the acquisition time of each frame.</li></ul></li></ol><h4 id="key-features" tabindex="-1"><a class="header-anchor" href="#key-features"><span>Key Features</span></a></h4><ul><li><strong>Consistent Navigation</strong>: The ordered imageIds array ensures smooth scrolling and accurate representation of image sequences.</li><li><strong>Support for Multi-Frame and 4D Datasets</strong>: Special handling for 4D datasets ensures frames are displayed in the correct temporal order.</li><li><strong>Fallback Logic</strong>: Robust fallback mechanisms prevent issues with incomplete or inconsistent DICOM metadata.</li></ul><h3 id="instances" tabindex="-1"><a class="header-anchor" href="#instances"><span>Instances</span></a></h3><p>The instances object is a key-value map where:</p>',7)),e("ul",null,[e("li",null,[n[62]||(n[62]=t("Key: A unique ")),n[63]||(n[63]=e("code",null,"imageId",-1)),n[64]||(n[64]=t(" generated by the ")),s(a,{to:"/api/loading.html"},{default:i(()=>n[61]||(n[61]=[t("image loader")])),_:1}),n[65]||(n[65]=t(" for a DICOM image."))]),n[66]||(n[66]=e("li",null,[t("Value: An "),e("code",null,"Instance"),t(" object that contains metadata and details for the corresponding DICOM image.")],-1))]),n[105]||(n[105]=e("p",null,"This object is critical for accessing and managing individual images in a series, providing all the necessary information to load, display, and interact with the image.",-1)),n[106]||(n[106]=e("h4",{id:"structure-of-an-instance-object",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#structure-of-an-instance-object"},[e("span",null,"Structure of an Instance Object")])],-1)),n[107]||(n[107]=e("p",null,[t("Each "),e("code",null,"Instance"),t(" object represents the "),e("code",null,"metadata"),t(" and properties of a single DICOM image. The structure of the Instance object is defined here:")],-1)),e("table",null,[n[82]||(n[82]=e("thead",null,[e("tr",null,[e("th",null,"Property"),e("th",null,"Description"),e("th",null,"Explanation")])],-1)),e("tbody",null,[e("tr",null,[n[68]||(n[68]=e("td",null,[e("code",null,"metadata")],-1)),n[69]||(n[69]=e("td",null,"Metadata of the image",-1)),e("td",null,[s(a,{to:"/api/parsing.html#metadata"},{default:i(()=>n[67]||(n[67]=[t("Link")])),_:1})])]),e("tr",null,[n[71]||(n[71]=e("td",null,[e("code",null,"pixelData")],-1)),n[72]||(n[72]=e("td",null,"Pixel data of the image",-1)),e("td",null,[s(a,{to:"/api/parsing.html#pixeldata"},{default:i(()=>n[70]||(n[70]=[t("Link")])),_:1})])]),e("tr",null,[n[74]||(n[74]=e("td",null,[e("code",null,"dataSet")],-1)),n[75]||(n[75]=e("td",null,"The parsed DICOM dataset for the image (optional)",-1)),e("td",null,[s(a,{to:"/api/parsing.html#dataset"},{default:i(()=>n[73]||(n[73]=[t("Link")])),_:1})])]),n[79]||(n[79]=e("tr",null,[e("td",null,[e("code",null,"file")]),e("td",null,"The original DICOM file object (optional)"),e("td",null,"-")],-1)),n[80]||(n[80]=e("tr",null,[e("td",null,[e("code",null,"instanceId")]),e("td",null,"The unique identifier for the instance"),e("td",null,"-")],-1)),n[81]||(n[81]=e("tr",null,[e("td",null,[e("code",null,"frame")]),e("td",null,"The index of the frame in a multiframe image"),e("td",null,"-")],-1)),e("tr",null,[n[77]||(n[77]=e("td",null,[e("code",null,"layers")],-1)),n[78]||(n[78]=e("td",null,"Layers present in the image (optional)",-1)),e("td",null,[s(a,{to:"/api/modules/visualizations/layers.html"},{default:i(()=>n[76]||(n[76]=[t("Overlays")])),_:1})])])])]),n[108]||(n[108]=e("h3",{id:"instanceuids",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#instanceuids"},[e("span",null,"InstanceUIDs")])],-1)),n[109]||(n[109]=e("p",null,[t("The "),e("code",null,"instanceUIDs"),t(" property is a key-value map where:")],-1)),e("ul",null,[n[93]||(n[93]=e("li",null,[e("strong",null,"Key"),t(": The "),e("code",null,"SOPInstanceUID"),t(" (unique identifier) for each DICOM instance.")],-1)),e("li",null,[n[84]||(n[84]=e("strong",null,"Value",-1)),n[85]||(n[85]=t(": The ")),n[86]||(n[86]=e("code",null,"imageId",-1)),n[87]||(n[87]=t(" corresponding to the instance, generated by the ")),s(a,{to:"/api/loading.html"},{default:i(()=>n[83]||(n[83]=[t("image loader")])),_:1}),n[88]||(n[88]=t(". This property provides a direct mapping between the ")),n[89]||(n[89]=e("code",null,"SOPInstanceUID",-1)),n[90]||(n[90]=t(" and the ")),n[91]||(n[91]=e("code",null,"imageId",-1)),n[92]||(n[92]=t(", ensuring that images are ordered logically and consistently within a series."))])]),n[110]||(n[110]=e("h4",{id:"key-features-of-instanceuids",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#key-features-of-instanceuids"},[e("span",null,"Key Features of instanceUIDs")])],-1)),e("ol",null,[e("li",null,[n[100]||(n[100]=e("p",null,[e("strong",null,"Ordering"),t(":")],-1)),e("ul",null,[e("li",null,[n[95]||(n[95]=t("The ")),n[96]||(n[96]=e("code",null,"instanceUIDs",-1)),n[97]||(n[97]=t(" map is ordered by the ")),s(a,{to:"/api/parsing.html#ordering-logic"},{default:i(()=>n[94]||(n[94]=[t("larvitar ordering logic")])),_:1}),n[98]||(n[98]=t("."))]),n[99]||(n[99]=e("li",null,"This ensures that images are arranged correctly for sequential navigation or temporal analysis.",-1))])]),n[101]||(n[101]=l("<li><p><strong>Quick Lookup</strong>:</p><ul><li>The <code>SOPInstanceUID</code> serves as a unique identifier for each image, making it easy to find the corresponding imageId.</li></ul></li><li><p><strong>Integration</strong>:</p><ul><li>The <code>instanceUIDs</code> property is critical for linking DICOM metadata (<code>SOPInstanceUID</code>) with Larvitar’s internal data (<code>imageId</code>).</li></ul></li>",2))]),n[111]||(n[111]=l(`<h4 id="example-structure-of-instanceuids" tabindex="-1"><a class="header-anchor" href="#example-structure-of-instanceuids"><span>Example Structure of instanceUIDs</span></a></h4><p>Here’s an example of an instanceUIDs object:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> instanceUIDs <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;1.2.840.113619.2.55.3.604688641.12345.1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;imageId1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;1.2.840.113619.2.55.3.604688641.12345.2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;imageId2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;1.2.840.113619.2.55.3.604688641.12345.3&quot;</span><span class="token operator">:</span> <span class="token string">&quot;imageId3&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataset" tabindex="-1"><a class="header-anchor" href="#dataset"><span>DataSet</span></a></h3><p>The dataSet property contains the parsed DICOM dataset for a series or image. It is a structured object that provides detailed information about the DICOM file, including metadata, pixel data, and other attributes.</p><p>This object is generated by the <a href="https://github.com/cornerstonejs/dicomParser" target="_blank" rel="noopener noreferrer">dicomParser library</a> and serves as the foundation for extracting and processing DICOM data in Larvitar.</p><p>When the <code>dataSet</code> property is present, you can access the DICOM metadata and pixel data directly from the object.</p><h3 id="metadata" tabindex="-1"><a class="header-anchor" href="#metadata"><span>Metadata</span></a></h3><p>The <code>metadata</code> property contains the DICOM metadata extracted from a DICOM file. It is a structured object that represents the attributes and values of the DICOM file, such as patient information, study details, and image characteristics.</p><p>This property is essential for understanding and analyzing the DICOM data, as it provides a comprehensive view of the image properties and associated information.</p><h4 id="structure-of-metadata" tabindex="-1"><a class="header-anchor" href="#structure-of-metadata"><span>Structure of Metadata</span></a></h4><p>The metadata object is organized as a key-value map, where:</p><ul><li><strong>Key</strong>: The DICOM tag (group, element) in hexadecimal format, such as <code>x00100010</code> for the patient&#39;s name.</li><li><strong>Value</strong>: The corresponding value of the DICOM attribute, such as the patient&#39;s name &quot;John Doe&quot;.</li></ul><p>In some cases larvitar exposes some human readable values for some tags, for example the patient&#39;s name, the patient&#39;s birth date, the study date, etc. See the <a href="https://github.com/dvisionlab/Larvitar/blob/master/imaging/MetaDataReadable.d.ts" target="_blank" rel="noopener noreferrer">MetadataReadable type</a> for more information.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> metadata <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  x00100010<span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  x00100020<span class="token operator">:</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  x00100030<span class="token operator">:</span> <span class="token string">&quot;19800101&quot;</span></span>
<span class="line">  <span class="token comment">// Other DICOM attributes...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pixeldata" tabindex="-1"><a class="header-anchor" href="#pixeldata"><span>PixelData</span></a></h3><p>The <code>pixelData</code> property contains the raw pixel data of a DICOM image. It is a typed array that represents the image in its pixel format, such as Uint8Array, Uint16Array, or Float32Array.</p><p>This property is essential for rendering and displaying the image in the viewer, as it provides the actual pixel values that make up the image.</p><h3 id="bytes" tabindex="-1"><a class="header-anchor" href="#bytes"><span>Bytes</span></a></h3><p>The <code>bytes</code> property indicates the number of allocated bytes for a DICOM series or image. It represents the total size of the DICOM data in memory, including metadata, pixel data, and other information.</p><p>This property is useful for estimating memory usage and optimizing data handling in Larvitar.</p><p><br></p><div style="text-align:center;"><img src="https://press.r1-it.storage.cloud.it/logo_trasparent.png" alt="D/Vision Lab" height="200"></div>`,23))])}const f=r(p,[["render",m],["__file","parsing.html.vue"]]),h=JSON.parse('{"path":"/api/parsing.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Parsing a DICOM File","slug":"parsing-a-dicom-file","link":"#parsing-a-dicom-file","children":[{"level":3,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":3,"title":"Parsing API","slug":"parsing-api","link":"#parsing-api","children":[]}]},{"level":2,"title":"Structure of a Series Object","slug":"structure-of-a-series-object","link":"#structure-of-a-series-object","children":[{"level":3,"title":"Larvitar Unique UID","slug":"larvitar-unique-uid","link":"#larvitar-unique-uid","children":[]},{"level":3,"title":"ImageIds","slug":"imageids","link":"#imageids","children":[]},{"level":3,"title":"Instances","slug":"instances","link":"#instances","children":[]},{"level":3,"title":"InstanceUIDs","slug":"instanceuids","link":"#instanceuids","children":[]},{"level":3,"title":"DataSet","slug":"dataset","link":"#dataset","children":[]},{"level":3,"title":"Metadata","slug":"metadata","link":"#metadata","children":[]},{"level":3,"title":"PixelData","slug":"pixeldata","link":"#pixeldata","children":[]},{"level":3,"title":"Bytes","slug":"bytes","link":"#bytes","children":[]}]}],"git":{"updatedTime":1759672351000,"contributors":[{"name":"Laura Borghesi","username":"Laura Borghesi","email":"146220917+laura-borghesi-lum00n@users.noreply.github.com","commits":1,"url":"https://github.com/Laura Borghesi"}]},"filePathRelative":"api/parsing.md","excerpt":"<div style=\\"text-align: center;\\">\\n    <img src=\\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png\\" alt=\\"Larvitar\\" height=\\"200\\">\\n</div>\\n<h2>Parsing a DICOM File</h2>\\n<p>Parsing a DICOM file is the first step in handling medical imaging data with Larvitar. It allows you to extract metadata and organize the data into a structured format. Larvitar uses the <a href=\\"https://github.com/cornerstonejs/dicomParser\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">dicomParser library</a> to read and parse DICOM files efficiently.</p>"}');export{f as comp,h as data};
