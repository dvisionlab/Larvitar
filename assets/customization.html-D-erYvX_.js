import{_ as e,c as a,a as t,o as n}from"./app-6pbiA5b1.js";const i={};function o(r,s){return n(),a("div",null,s[0]||(s[0]=[t(`<div style="text-align:center;"><img src="https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png" alt="Larvitar" height="200"></div><h2 id="introduction-dicom-image-customization" tabindex="-1"><a class="header-anchor" href="#introduction-dicom-image-customization"><span>Introduction: DICOM Image Customization</span></a></h2><p>DICOM image customization involves modifying both metadata and the byte array in a DICOM file. This includes adjusting tag elements, padding, and offsets to align with specific requirements. Below is an overview of the procedure used to customize a DICOM image.</p><h2 id="procedure-overview" tabindex="-1"><a class="header-anchor" href="#procedure-overview"><span>Procedure Overview</span></a></h2><p>The customization process consists of the following steps:</p><ul><li><p><strong>sortTags</strong> – Organizes DICOM tags in ascending order based on offset.</p></li><li><p><strong>preProcessByteArray</strong> – Ensures proper padding for Value Representations (VRs).</p></li><li><p><strong>customizeByteArray</strong> – Evaluates shifts in the byte array.</p></li><li><p><strong>changeOffsets</strong> – Updates lengths and offsets in the dataset and metadata objects.</p></li></ul><h3 id="sorttags-sorting-tags-and-custom-tags-by-offset" tabindex="-1"><a class="header-anchor" href="#sorttags-sorting-tags-and-custom-tags-by-offset"><span>sortTags: Sorting Tags and Custom Tags by Offset</span></a></h3><p><strong>Purpose:</strong> Sorts standard and custom DICOM tags in ascending order based on their offset positions, ensuring sequential processing.</p><p><strong>Steps:</strong></p><ul><li><p>Organize both standard and custom tags based on offset.</p></li><li><p>Identify the minimum offset in the custom tags to serve as the starting shift point.</p></li><li><p>Add necessary padding to custom tags to maintain alignment.</p></li></ul><h3 id="preprocessbytearray-checking-and-adjusting-padding" tabindex="-1"><a class="header-anchor" href="#preprocessbytearray-checking-and-adjusting-padding"><span>preProcessByteArray: Checking and Adjusting Padding</span></a></h3><p><strong>Purpose:</strong> Ensures that certain Value Representations (VRs) maintain a consistent structure by enforcing even-length values.</p><p><strong>Steps:</strong></p><ul><li>Identify odd-length tag values and pad them with a space (ASCII 32) if needed.</li></ul><p><strong>Example:</strong> A tag value of &quot;TEST1&quot; (length = 5) will be padded to &quot;TEST1 &quot; (length = 6) to maintain even-length formatting.</p><h3 id="customizebytearray-evaluating-byte-array-shifts" tabindex="-1"><a class="header-anchor" href="#customizebytearray-evaluating-byte-array-shifts"><span>customizeByteArray: Evaluating Byte Array Shifts</span></a></h3><p><strong>Purpose:</strong> Calculates necessary shifts in the byte array caused by tag modifications, ensuring proper alignment.</p><p><strong>Steps:</strong></p><ul><li><p>Identify changes in tag lengths and compute how these modifications affect subsequent tag positions.</p></li><li><p>Apply the necessary shifts to adjust the dataset structure.</p></li></ul><p><strong>Example:</strong> A tag at offset 10 changes from length 5 to 3, shifting subsequent tags backward by 2 bytes.</p><ul><li>Update shifts for all consecutive tags to maintain consistency.</li></ul><h3 id="changeoffsets-updating-dataset-and-metadata" tabindex="-1"><a class="header-anchor" href="#changeoffsets-updating-dataset-and-metadata"><span>changeOffsets: Updating Dataset and Metadata</span></a></h3><p><strong>Purpose:</strong> Ensures that all tag offsets and lengths are accurately updated in both the dataset and metadata objects.</p><p><strong>Steps:</strong></p><ul><li><p>Adjust tag lengths and offsets according to the shifts determined in customizeByteArray.</p></li><li><p>Verify that all tags are properly aligned in the dataset.</p></li><li><p>Ensure metadata consistency by checking that tag values are correctly mapped in the updated structure.</p></li></ul><h2 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference"><span>API Reference</span></a></h2><p><code>customizeByteArray</code></p><p>Generates a customized version of the DICOM series by modifying its metadata and byte array based on specified custom tags.</p><h3 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">customizeByteArray</span> <span class="token punctuation">(</span></span>
<span class="line">series<span class="token operator">:</span> Series<span class="token punctuation">,</span></span>
<span class="line">customTags<span class="token operator">:</span> MetaData</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Series</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>series</code></td><td>Series</td><td>Series to customize</td></tr><tr><td><code>customTags</code></td><td>MetaData</td><td>The customized tags/metadata to set</td></tr></tbody></table><h3 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h3><p><code>Series</code> – The customized series with updated metadata and byte array.</p><h2 id="how-to-save-the-customized-series" tabindex="-1"><a class="header-anchor" href="#how-to-save-the-customized-series"><span>How to save the customized series</span></a></h2><p>To save the newly modified series as a DICOM file, use the following approach:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">[</span></span>
<span class="line">    series<span class="token punctuation">.</span>instances<span class="token punctuation">[</span></span>
<span class="line">      series<span class="token punctuation">.</span>imageIds<span class="token punctuation">[</span></span>
<span class="line">        <span class="token function">parseInt</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;downloadInput&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">.</span>dataSet<span class="token punctuation">.</span>byteArray</span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    type<span class="token operator">:</span> <span class="token string">&quot;application/dicom&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code creates a Blob object from the byte array of a selected instance in the series, allowing it to be saved as a valid DICOM file.</p><p><br></p><div style="text-align:center;"><img src="https://press.r1-it.storage.cloud.it/logo_trasparent.png" alt="D/Vision Lab" height="200"></div>`,40)]))}const p=e(i,[["render",o],["__file","customization.html.vue"]]),c=JSON.parse('{"path":"/api/modules/utilities/customization.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Introduction: DICOM Image Customization","slug":"introduction-dicom-image-customization","link":"#introduction-dicom-image-customization","children":[]},{"level":2,"title":"Procedure Overview","slug":"procedure-overview","link":"#procedure-overview","children":[{"level":3,"title":"sortTags: Sorting Tags and Custom Tags by Offset","slug":"sorttags-sorting-tags-and-custom-tags-by-offset","link":"#sorttags-sorting-tags-and-custom-tags-by-offset","children":[]},{"level":3,"title":"preProcessByteArray: Checking and Adjusting Padding","slug":"preprocessbytearray-checking-and-adjusting-padding","link":"#preprocessbytearray-checking-and-adjusting-padding","children":[]},{"level":3,"title":"customizeByteArray: Evaluating Byte Array Shifts","slug":"customizebytearray-evaluating-byte-array-shifts","link":"#customizebytearray-evaluating-byte-array-shifts","children":[]},{"level":3,"title":"changeOffsets: Updating Dataset and Metadata","slug":"changeoffsets-updating-dataset-and-metadata","link":"#changeoffsets-updating-dataset-and-metadata","children":[]}]},{"level":2,"title":"API Reference","slug":"api-reference","link":"#api-reference","children":[{"level":3,"title":"Syntax","slug":"syntax","link":"#syntax","children":[]},{"level":3,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]},{"level":3,"title":"Returns","slug":"returns","link":"#returns","children":[]}]},{"level":2,"title":"How to save the customized series","slug":"how-to-save-the-customized-series","link":"#how-to-save-the-customized-series","children":[]}],"git":{"updatedTime":1759672351000,"contributors":[{"name":"Laura Borghesi","username":"Laura Borghesi","email":"146220917+laura-borghesi-lum00n@users.noreply.github.com","commits":1,"url":"https://github.com/Laura Borghesi"}]},"filePathRelative":"api/modules/utilities/customization.md","excerpt":"<div style=\\"text-align: center;\\">\\n    <img src=\\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png\\" alt=\\"Larvitar\\" height=\\"200\\">\\n</div>\\n<h2>Introduction: DICOM Image Customization</h2>\\n<p>DICOM image customization involves modifying both metadata and the byte array in a DICOM file. This includes adjusting tag elements, padding, and offsets to align with specific requirements. Below is an overview of the procedure used to customize a DICOM image.</p>"}');export{p as comp,c as data};
