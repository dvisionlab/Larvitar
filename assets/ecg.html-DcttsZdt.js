import{_ as a,c as t,a as s,o as i}from"./app-6pbiA5b1.js";const n={};function r(l,e){return i(),t("div",null,e[0]||(e[0]=[s(`<div style="text-align:center;"><img src="https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png" alt="Larvitar" height="200"></div><h1 id="ecg-parser-module" tabindex="-1"><a class="header-anchor" href="#ecg-parser-module"><span>ECG Parser Module</span></a></h1><p>The ECG Parser Module is designed to extract and process ECG (Electrocardiogram) signal data from a DICOM dataset. It generates a normalized array of points representing the ECG signal, suitable for visualization or analysis in medical imaging workflows</p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span>Features</span></a></h2><ol><li><p><strong>Signal Downsampling:</strong></p><ul><li>Reduces the number of points in the ECG signal for efficient processing and rendering.</li><li>Adjustable via the <code>nSampling</code> parameter.</li></ul></li><li><p><strong>Normalization:</strong></p><ul><li>Converts raw ECG signal values to a normalized scale for consistent visualization.</li></ul></li><li><p><strong>Integration with Series Metadata:</strong></p><ul><li>The processed ECG data is stored directly in the series <code>metadata</code>, making it accessible throughout the application.</li></ul></li></ol><h2 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference"><span>API Reference</span></a></h2><p><code>parseECG</code> Generates an array of points representing the ECG signal from a DICOM dataset and stores the processed data in the series metadata.</p><h3 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token function">parseECG</span><span class="token punctuation">(</span></span>
<span class="line">  seriesId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  metadata<span class="token operator">:</span> MetaData<span class="token punctuation">,</span></span>
<span class="line">  nSampling<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h3><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>seriesId</code></td><td>string</td><td>The unique identifier of the series to which the ECG data belongs.</td></tr><tr><td><code>metadata</code></td><td>MetaData</td><td>Thes metadata object containing the ECG signal data</td></tr><tr><td><code>nSampling</code></td><td>number</td><td>The sampling rate to downsample the signal. Defaults to 2.</td></tr></tbody></table><h3 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h3><p><code>void</code> – The function does not return a value. The processed ECG data is stored directly in the series metadata under <code>ecgData</code>.</p><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h2><ol><li><strong>Data Extraction:</strong></li></ol><p>The function first looks for the raw ECG data within the metadata object using the private DICOM tag (5000,3000). It&#39;s designed to handle two common formats:</p><ul><li><p>A Base64 encoded string, which it decodes into a byte array (Uint8Array) -&gt; singleFrame / frame by frame case.</p></li><li><p>A pre-existing byte array (Uint8Array) -&gt; default multiframe DICOM.</p></li></ul><ol start="2"><li><p><strong>Downsampling:</strong></p><ul><li>The signal is downsampled to reduce the number of points based on the <code>nSampling</code> parameter. For example, if <code>nSampling</code> is <code>2</code>, every second point is retained.</li></ul></li><li><p><strong>Normalization:</strong></p><ul><li>The signal values are normalized to a range of <code>0</code> to <code>100</code> for consistent scaling, calculated using the formula: Normalized Value = ((Value - Min) / (Max - Min)) × 100</li></ul></li><li><p><strong>Data Storage:</strong></p><ul><li>The processed ECG points are stored in the series metadata under the <code>ecgData</code> field.</li></ul></li></ol><h3 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling"><span>Error Handling</span></a></h3><ol><li><p><strong>Invalid Tag:</strong></p><ul><li>If the specified DICOM tag does not exist in the dataset, an error will occur.</li></ul></li><li><p><strong>Empty Data:</strong></p><ul><li>If the data element is empty or the byte array is invalid, the function will silently skip processing.</li></ul></li></ol><h3 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations"><span>Limitations</span></a></h3><ol><li><p><strong>Assumes Two-Byte Data:</strong></p><ul><li>The function assumes that the ECG data is stored as two-byte values (Uint16). Datasets with different formats may require modifications.</li></ul></li><li><p><strong>Single Signal Tag:</strong></p><ul><li>Currently processes a single ECG tag at a time. Multiple tags or multichannel ECG data would require additional handling.</li></ul></li><li><p><strong>Fixed Normalization:</strong></p><ul><li>Normalization scales values to 0-100, which may not be suitable for all visualization needs.</li></ul></li></ol><p><br></p><div style="text-align:center;"><img src="https://press.r1-it.storage.cloud.it/logo_trasparent.png" alt="D/Vision Lab" height="200"></div>`,24)]))}const d=a(n,[["render",r],["__file","ecg.html.vue"]]),p=JSON.parse('{"path":"/api/modules/parsers/ecg.html","title":"ECG Parser Module","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Features","slug":"features","link":"#features","children":[]},{"level":2,"title":"API Reference","slug":"api-reference","link":"#api-reference","children":[{"level":3,"title":"Syntax","slug":"syntax","link":"#syntax","children":[]},{"level":3,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]},{"level":3,"title":"Returns","slug":"returns","link":"#returns","children":[]}]},{"level":2,"title":"How It Works","slug":"how-it-works","link":"#how-it-works","children":[{"level":3,"title":"Error Handling","slug":"error-handling","link":"#error-handling","children":[]},{"level":3,"title":"Limitations","slug":"limitations","link":"#limitations","children":[]}]}],"git":{"updatedTime":1759672351000,"contributors":[{"name":"Laura Borghesi","username":"Laura Borghesi","email":"146220917+laura-borghesi-lum00n@users.noreply.github.com","commits":1,"url":"https://github.com/Laura Borghesi"}]},"filePathRelative":"api/modules/parsers/ecg.md","excerpt":"<div style=\\"text-align: center;\\">\\n    <img src=\\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png\\" alt=\\"Larvitar\\" height=\\"200\\">\\n</div>\\n<h1>ECG Parser Module</h1>\\n<p>The ECG Parser Module is designed to extract and process ECG (Electrocardiogram) signal data from a DICOM dataset. It generates a normalized array of points representing the ECG signal, suitable for visualization or analysis in medical imaging workflows</p>"}');export{d as comp,p as data};
