import{_ as n,c as s,a,o as t}from"./app-6pbiA5b1.js";const l={};function o(i,e){return t(),s("div",null,e[0]||(e[0]=[a(`<div style="text-align:center;"><img src="https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png" alt="Larvitar" height="200"></div><h1 id="logging-module-documentation" tabindex="-1"><a class="header-anchor" href="#logging-module-documentation"><span>Logging Module Documentation</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>The logging module in this project uses <a href="https://github.com/unjs/consola" target="_blank" rel="noopener noreferrer"><strong>Consola</strong></a> as the primary logging library. Consola provides colorized, structured, and browser-friendly logging while preserving file and line number references.</p><h2 id="default-log-level" tabindex="-1"><a class="header-anchor" href="#default-log-level"><span>Default Log Level</span></a></h2><p>By default, the logging level is set to <strong>&quot;info&quot;</strong>. This means that logs with levels <strong>info, warn, and error</strong> will be recorded, while <strong>debug</strong> logs will be ignored unless explicitly enabled.</p><h2 id="log-levels-supported" tabindex="-1"><a class="header-anchor" href="#log-levels-supported"><span>Log Levels Supported</span></a></h2><p>The following log levels are available:</p><table><thead><tr><th>Level</th><th>Description</th></tr></thead><tbody><tr><td><code>silent</code></td><td>Disables all logging</td></tr><tr><td><code>error</code></td><td>Logs only errors</td></tr><tr><td><code>warn</code></td><td>Logs warnings and errors</td></tr><tr><td><code>info</code></td><td>Logs informational messages, warnings, and errors (default)</td></tr><tr><td><code>debug</code></td><td>Logs all messages including debug messages</td></tr></tbody></table><h2 id="storing-log-level-in-local-storage" tabindex="-1"><a class="header-anchor" href="#storing-log-level-in-local-storage"><span>Storing Log Level in Local Storage</span></a></h2><p>The log level is <strong>persisted in the browser&#39;s local storage</strong>, ensuring that the selected logging level remains the same across page reloads. If no level is set, it defaults to <code>info</code>.</p><h2 id="exposed-functions" tabindex="-1"><a class="header-anchor" href="#exposed-functions"><span>Exposed Functions</span></a></h2><p>The following functions are available for managing logging:</p><h3 id="logger-info-message-string" tabindex="-1"><a class="header-anchor" href="#logger-info-message-string"><span><code>logger.info(message: string)</code></span></a></h3><p>Logs an informational message.</p><h3 id="logger-warn-message-string" tabindex="-1"><a class="header-anchor" href="#logger-warn-message-string"><span><code>logger.warn(message: string)</code></span></a></h3><p>Logs a warning message.</p><h3 id="logger-error-message-string" tabindex="-1"><a class="header-anchor" href="#logger-error-message-string"><span><code>logger.error(message: string)</code></span></a></h3><p>Logs an error message.</p><h3 id="logger-debug-message-string" tabindex="-1"><a class="header-anchor" href="#logger-debug-message-string"><span><code>logger.debug(message: string)</code></span></a></h3><p>Logs a debug message. Only visible when log level is set to <code>debug</code>.</p><h3 id="setloglevel-level-logtype" tabindex="-1"><a class="header-anchor" href="#setloglevel-level-logtype"><span><code>setLogLevel(level: LogType)</code></span></a></h3><p>Changes the logging level dynamically at runtime.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> setLogLevel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./logger&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">setLogLevel</span><span class="token punctuation">(</span><span class="token string">&quot;debug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Enables debug logs</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getloglevel-logtype" tabindex="-1"><a class="header-anchor" href="#getloglevel-logtype"><span><code>getLogLevel(): LogType</code></span></a></h3><p>Returns the current logging level as a string.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getLogLevel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./logger&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Current Log Level: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example-usage" tabindex="-1"><a class="header-anchor" href="#example-usage"><span>Example Usage</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> logger<span class="token punctuation">,</span> <span class="token punctuation">{</span> setLogLevel<span class="token punctuation">,</span> getLogLevel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./logger&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Application started!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;This is a warning!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Debugging details...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setLogLevel</span><span class="token punctuation">(</span><span class="token string">&quot;debug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Enable debug logging</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Current Log Level: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="why-use-consola" tabindex="-1"><a class="header-anchor" href="#why-use-consola"><span>Why Use Consola?</span></a></h2><ul><li><strong>Colorized Logs</strong>: Logs are formatted for better readability in the browser console.</li><li><strong>Correct File &amp; Line References</strong>: Logs preserve debugging context.</li><li><strong>Runtime Configuration</strong>: Log levels can be changed dynamically.</li><li><strong>Persistent Settings</strong>: Log level is stored in <code>localStorage</code>.</li></ul><p>With this logging module, debugging and log management become efficient and flexible. 🚀</p><p><br></p><div style="text-align:center;"><img src="https://press.r1-it.storage.cloud.it/logo_trasparent.png" alt="D/Vision Lab" height="200"></div>`,34)]))}const p=n(l,[["render",o],["__file","logger.html.vue"]]),g=JSON.parse('{"path":"/api/modules/logger.html","title":"Logging Module Documentation","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Default Log Level","slug":"default-log-level","link":"#default-log-level","children":[]},{"level":2,"title":"Log Levels Supported","slug":"log-levels-supported","link":"#log-levels-supported","children":[]},{"level":2,"title":"Storing Log Level in Local Storage","slug":"storing-log-level-in-local-storage","link":"#storing-log-level-in-local-storage","children":[]},{"level":2,"title":"Exposed Functions","slug":"exposed-functions","link":"#exposed-functions","children":[{"level":3,"title":"logger.info(message: string)","slug":"logger-info-message-string","link":"#logger-info-message-string","children":[]},{"level":3,"title":"logger.warn(message: string)","slug":"logger-warn-message-string","link":"#logger-warn-message-string","children":[]},{"level":3,"title":"logger.error(message: string)","slug":"logger-error-message-string","link":"#logger-error-message-string","children":[]},{"level":3,"title":"logger.debug(message: string)","slug":"logger-debug-message-string","link":"#logger-debug-message-string","children":[]},{"level":3,"title":"setLogLevel(level: LogType)","slug":"setloglevel-level-logtype","link":"#setloglevel-level-logtype","children":[]},{"level":3,"title":"getLogLevel(): LogType","slug":"getloglevel-logtype","link":"#getloglevel-logtype","children":[]}]},{"level":2,"title":"Example Usage","slug":"example-usage","link":"#example-usage","children":[]},{"level":2,"title":"Why Use Consola?","slug":"why-use-consola","link":"#why-use-consola","children":[]}],"git":{"updatedTime":1759672351000,"contributors":[{"name":"Laura Borghesi","username":"Laura Borghesi","email":"146220917+laura-borghesi-lum00n@users.noreply.github.com","commits":1,"url":"https://github.com/Laura Borghesi"}]},"filePathRelative":"api/modules/logger.md","excerpt":"<div style=\\"text-align: center;\\">\\n    <img src=\\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png\\" alt=\\"Larvitar\\" height=\\"200\\">\\n</div>\\n<h1>Logging Module Documentation</h1>\\n<h2>Overview</h2>\\n<p>The logging module in this project uses <a href=\\"https://github.com/unjs/consola\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>Consola</strong></a> as the primary logging library. Consola provides colorized, structured, and browser-friendly logging while preserving file and line number references.</p>"}');export{p as comp,g as data};
