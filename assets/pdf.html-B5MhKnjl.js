import{_ as l,c as o,a,b as n,d as s,e as r,f as i,r as p,o as d}from"./app-6pbiA5b1.js";const u={};function g(c,e){const t=p("RouteLink");return d(),o("div",null,[e[16]||(e[16]=a('<div style="text-align:center;"><img src="https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png" alt="Larvitar" height="200"></div><h1 id="pdf-parser-module" tabindex="-1"><a class="header-anchor" href="#pdf-parser-module"><span>PDF Parser Module</span></a></h1><p>The <code>pdf</code> module is designed to handle <strong>DICOM encapsulated PDF objects</strong>, allowing you to extract and render individual PDF pages as image files. It leverages the <a href="https://github.com/hyzyla/pdfium" target="_blank" rel="noopener noreferrer">PDFium library</a> for PDF rendering, providing high-quality output for medical imaging and documentation workflows.</p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span>Features</span></a></h2>',4)),n("ul",null,[e[4]||(e[4]=n("li",null,[n("strong",null,"PDF to Image Conversion"),s(": Extracts and renders PDF pages as PNG images.")],-1)),e[5]||(e[5]=n("li",null,[n("strong",null,"Memory Optimization"),s(": Ensures efficient memory management by releasing unused resources.")],-1)),n("li",null,[e[1]||(e[1]=n("strong",null,"File Management Integration",-1)),e[2]||(e[2]=s(": Automatically integrates generated files with the internal ")),r(t,{to:"/api/modules/managers/fileManager.html"},{default:i(()=>e[0]||(e[0]=[s("File Manager")])),_:1}),e[3]||(e[3]=s("."))]),e[6]||(e[6]=n("li",null,[n("strong",null,"Error Handling"),s(": Validates file types and handles common fetch/rendering errors.")],-1))]),e[17]||(e[17]=a(`<h2 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference"><span>API Reference</span></a></h2><p><code>generateFiles</code> Generates an array of image files from a PDF file.</p><h4 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span><strong>Syntax</strong></span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">async</span> <span class="token function">generateFiles</span><span class="token punctuation">(</span>fileURL<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>File<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span><strong>Parameters</strong></span></a></h4><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>fileURL</code></td><td>string</td><td>The URL of the PDF file to be processed.</td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span><strong>Returns</strong></span></a></h4><p>An array of <code>File</code> objects representing the PNG images of each PDF page.</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span><strong>Example</strong></span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> pdfFileURL <span class="token operator">=</span> <span class="token string">&quot;https://example.com/sample.pdf&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">generateFiles</span><span class="token punctuation">(</span>pdfFileURL<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Generated Files:&quot;</span><span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Outputs: Array of PNG file objects</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h2><h3 id="core-workflow" tabindex="-1"><a class="header-anchor" href="#core-workflow"><span>Core Workflow</span></a></h3>`,12)),n("ol",null,[e[13]||(e[13]=n("li",null,[n("strong",null,"Fetching the PDF"),s(": The "),n("code",null,"generateFiles"),s(" function fetches the PDF from the provided URL.")],-1)),e[14]||(e[14]=n("li",null,[n("strong",null,"Parsing Pages"),s(": The PDFium library parses the PDF, extracts individual pages, and renders them as bitmap data.")],-1)),e[15]||(e[15]=n("li",null,[n("strong",null,"Canvas Rendering"),s(": The internal "),n("code",null,"generateFile"),s(" function converts bitmap data into a PNG using the HTML5 Canvas API.")],-1)),n("li",null,[e[8]||(e[8]=n("strong",null,"File Creation",-1)),e[9]||(e[9]=s(": Each page is saved as a ")),e[10]||(e[10]=n("code",null,"File",-1)),e[11]||(e[11]=s(" object and added to the ")),r(t,{to:"/api/modules/managers/fileManager.html"},{default:i(()=>e[7]||(e[7]=[s("File Manager")])),_:1}),e[12]||(e[12]=s("."))])]),e[18]||(e[18]=a('<h3 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling"><span>Error Handling</span></a></h3><ul><li><strong>Fetch Errors</strong>: Handles network or file retrieval errors.</li><li><strong>Invalid File Type</strong>: Ensures only valid PDFs are processed.</li><li><strong>Rendering Failures</strong>: Detects and handles errors during bitmap conversion.</li></ul><h3 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations"><span>Limitations</span></a></h3><ul><li><strong>PDFium Dependency</strong>: Requires the PDFium library for rendering, which may not support all PDF features.</li><li><strong>Memory Usage</strong>: Large PDF files with numerous pages may require significant memory during processing.</li><li><strong>Rendering Scale</strong>: Currently set to <code>3x</code> scale; adjustments may be needed for specific use cases.</li></ul><p><br></p><div style="text-align:center;"><img src="https://press.r1-it.storage.cloud.it/logo_trasparent.png" alt="D/Vision Lab" height="200"></div>',6))])}const h=l(u,[["render",g],["__file","pdf.html.vue"]]),f=JSON.parse('{"path":"/api/modules/parsers/pdf.html","title":"PDF Parser Module","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Features","slug":"features","link":"#features","children":[]},{"level":2,"title":"API Reference","slug":"api-reference","link":"#api-reference","children":[]},{"level":2,"title":"How It Works","slug":"how-it-works","link":"#how-it-works","children":[{"level":3,"title":"Core Workflow","slug":"core-workflow","link":"#core-workflow","children":[]},{"level":3,"title":"Error Handling","slug":"error-handling","link":"#error-handling","children":[]},{"level":3,"title":"Limitations","slug":"limitations","link":"#limitations","children":[]}]}],"git":{"updatedTime":1759672351000,"contributors":[{"name":"Laura Borghesi","username":"Laura Borghesi","email":"146220917+laura-borghesi-lum00n@users.noreply.github.com","commits":1,"url":"https://github.com/Laura Borghesi"}]},"filePathRelative":"api/modules/parsers/pdf.md","excerpt":"<div style=\\"text-align: center;\\">\\n    <img src=\\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png\\" alt=\\"Larvitar\\" height=\\"200\\">\\n</div>\\n<h1>PDF Parser Module</h1>\\n<p>The <code>pdf</code> module is designed to handle <strong>DICOM encapsulated PDF objects</strong>, allowing you to extract and render individual PDF pages as image files. It leverages the <a href=\\"https://github.com/hyzyla/pdfium\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">PDFium library</a> for PDF rendering, providing high-quality output for medical imaging and documentation workflows.</p>"}');export{h as comp,f as data};
