import{_ as t,c as s,a as n,o as d}from"./app-6pbiA5b1.js";const a={};function o(i,e){return d(),s("div",null,e[0]||(e[0]=[n(`<div style="text-align:center;"><img src="https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png" alt="Larvitar" height="200"></div><h2 id="the-larvitar-store" tabindex="-1"><a class="header-anchor" href="#the-larvitar-store"><span>The Larvitar Store</span></a></h2><p>The Larvitar Store is a centralized data configuration store that manages the state and settings required for the application. It keeps track of information related to tools, series, viewports, and other imaging-related data, enabling dynamic interaction with the viewer.</p><h3 id="core-responsibilities" tabindex="-1"><a class="header-anchor" href="#core-responsibilities"><span>Core Responsibilities</span></a></h3><p>The Larvitar Store serves several key purposes:</p><ol><li><p><strong>Tools Management:</strong></p><ul><li>Stores the currently active tools for the left and right mouse buttons.</li><li>Allows dynamic switching and resetting of tools.</li></ul></li><li><p><strong>Series Management:</strong> Tracks series data, including:</p><ul><li>imageIds: Array of image identifiers for each series.</li><li>cached: Indicates whether each image in the series has been cached.</li><li>progress: Tracks the loading progress of the series.</li><li>elementId: HTML element ID where the series is rendered.</li></ul></li><li><p><strong>Viewport Management:</strong> Keeps viewport-specific data, such as:</p><ul><li>Slice and time positions (sliceId, timeId).</li><li>Pixel spacing, dimensions, and modality.</li><li>Viewer settings like zoom, rotation, and translation.</li></ul></li><li><p><strong>Error and Logging:</strong> Captures errors and logs them for debugging purposes.</p></li></ol><h3 id="store-structure" tabindex="-1"><a class="header-anchor" href="#store-structure"><span>Store Structure</span></a></h3><p>The store is defined by the <a href="https://github.com/dvisionlab/Larvitar/blob/master/imaging/imageStore.ts#L17" target="_blank" rel="noopener noreferrer">Store type</a> and includes the following key properties:</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>colormapId</code></td><td><code>string</code></td><td>Current colormap identifier (e.g., &quot;gray&quot;).</td></tr><tr><td><code>errorLog </code></td><td><code>string</code></td><td>Error log for debugging.</td></tr><tr><td><code>leftActiveTool</code></td><td><code>string (optional)</code></td><td>Active tool for the left mouse button.</td></tr><tr><td><code>rightActiveTool</code></td><td><code>string (optional)</code></td><td>Active tool for the right mouse button.</td></tr><tr><td><code>series</code></td><td><code>{ [uniqueUID: string]: StoreSeries }</code></td><td>Object mapping <code>uniqueUID</code> to series-specific data.</td></tr><tr><td><code>viewports</code></td><td><code>{ [key: string]: StoreViewport }</code></td><td>Object mapping viewport IDs to viewport-specific data.</td></tr></tbody></table><p>The <code>StoreSeries</code> type includes the following key properties:</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>imageIds</code></td><td><code>string</code></td><td>Array of <code>imageIds</code> for the series.</td></tr><tr><td><code>cached</code></td><td><code>{ [imageId: string]: boolean }</code></td><td>Tracks whether each <code>imageId</code> in the series has been cached or not.</td></tr></tbody></table><p>The <code>StoreViewport</code> <a href="https://github.com/dvisionlab/Larvitar/blob/master/imaging/types.d.ts#L34" target="_blank" rel="noopener noreferrer">type</a> includes the following key properties:</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>loading</code></td><td><code>number</code></td><td>Caching progress of the series from 0% to 100 %, initialized to null.</td></tr><tr><td><code>ready</code></td><td><code>boolean</code></td><td>True when the viewport is ready and imageId has been rendered.</td></tr><tr><td><code>uniqueUID</code></td><td><code>string?</code></td><td>Unique identifier for the series.</td></tr><tr><td><code>modality</code></td><td><code>string</code></td><td>Modality of the image (e.g., &quot;CT&quot;).</td></tr><tr><td><code>isColor</code></td><td><code>boolean</code></td><td>True if the image is in color.</td></tr><tr><td><code>isMultiframe</code></td><td><code>boolean</code></td><td>True if the image is multiframe.</td></tr><tr><td><code>isTimeserie</code></td><td><code>boolean</code></td><td>True if the image is a timeserie.</td></tr><tr><td><code>isDSAEnabled</code></td><td><code>boolean</code></td><td>True if DSA is enabled.</td></tr><tr><td><code>isPDF</code></td><td><code>boolean</code></td><td>True if the image is a PDF.</td></tr><tr><td><code>imageId</code></td><td><code>string</code></td><td>Identifier for the image.</td></tr><tr><td><code>rows</code></td><td><code>number</code></td><td>Rows in the image.</td></tr><tr><td><code>cols</code></td><td><code>number</code></td><td>Columns in the image.</td></tr><tr><td><code>spacing_x</code></td><td><code>number</code></td><td>Spacing in the x direction.</td></tr><tr><td><code>spacing_y</code></td><td><code>number</code></td><td>Spacing in the y direction.</td></tr><tr><td><code>thickness</code></td><td><code>number</code></td><td>Slice thickness.</td></tr><tr><td><code>numberOfSlices</code></td><td><code>number?</code></td><td>Number of slices in the image.</td></tr><tr><td><code>numberOfFrames</code></td><td><code>number?</code></td><td>Number of frames in the image.</td></tr><tr><td><code>minPixelValue</code></td><td><code>number</code></td><td>Minimum pixel value.</td></tr><tr><td><code>maxPixelValue</code></td><td><code>number</code></td><td>Maximum pixel value.</td></tr><tr><td><code>sliceId</code></td><td><code>number</code></td><td>Slice index identifier of the rendered image.</td></tr><tr><td><code>minSliceId</code></td><td><code>number</code></td><td>Minimum slice index.</td></tr><tr><td><code>maxSliceId</code></td><td><code>number</code></td><td>Maximum slice index.</td></tr><tr><td><code>pendingSliceId</code></td><td><code>number?</code></td><td>Pending slice index to be rendered.</td></tr><tr><td><code>timeId</code></td><td><code>number</code></td><td>Time index identifier, for timeseries.</td></tr><tr><td><code>timeIndex</code></td><td><code>number?</code></td><td>Time index, for timeseries.</td></tr><tr><td><code>minTimeId</code></td><td><code>number</code></td><td>Minimum time index, for timeseries.</td></tr><tr><td><code>maxTimeId</code></td><td><code>number</code></td><td>Maximum time index, for timeseries.</td></tr><tr><td><code>timeIds</code></td><td><code>number[]</code></td><td>Array of time index identifiers, for timeseries.</td></tr><tr><td><code>timestamp</code></td><td><code>number</code></td><td>Timestamp of the image, for timeseries.</td></tr><tr><td><code>timestamps</code></td><td><code>number[]</code></td><td>Array of image timestamps, for timeseries.</td></tr><tr><td><code>numberOfTemporalPositions</code></td><td><code>number?</code></td><td>Number of temporal positions, for timeseries.</td></tr><tr><td><code>dsa</code></td><td><code>boolean</code></td><td>True if DSA is enabled.</td></tr><tr><td><code>pixelShift</code></td><td><code>number[]</code></td><td>Pixel shift for the image in DSA mode.</td></tr><tr><td><code>waveform</code></td><td><code>boolean</code></td><td>True if the image has waveform data, for ecg</td></tr><tr><td><code>viewport</code></td><td><code>viewportType</code></td><td>Type of the viewport.</td></tr></tbody></table><p>The <code>Viewport</code> type includes the following key properties:</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>scale</code></td><td><code>number</code></td><td>Current scale factor for the viewport.</td></tr><tr><td><code>rotation</code></td><td><code>number</code></td><td>Current rotation for the viewport.</td></tr><tr><td><code>translation</code></td><td><code>{x:number, y:number}</code></td><td>Current translation for the viewport.</td></tr><tr><td><code>voi</code></td><td><code>{windowCenter:number, windowWidth:number}</code></td><td>Current windowing settings for the viewport.</td></tr><tr><td><code>default</code></td><td><code>viewportType</code></td><td>Default viewport settings.</td></tr></tbody></table><h3 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization"><span>Initialization</span></a></h3><p>The store must be initialized before use:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;larvitar&#39;</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="viewport-management" tabindex="-1"><a class="header-anchor" href="#viewport-management"><span>Viewport Management</span></a></h3><p>A Viewport is a window that displays an image. The store manages viewport-specific data, such as the slice and time positions, pixel spacing, dimensions, and modality. It also stores viewer settings like zoom, rotation, and translation.</p><p>To add a viewport to the store, use the <code>addViewport</code> function with the HTML element ID where the viewport is rendered:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;larvitar&#39;</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">addViewport</span><span class="token punctuation">(</span>elementId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>To get the viewport data for a specific element ID, use the <code>get</code> function with the viewport key:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;larvitar&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> viewport <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;viewports&quot;</span><span class="token punctuation">,</span> elementId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>To delete a viewport from the store, use the <code>deleteViewport</code> function with the viewport key:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;larvitar&#39;</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">deleteViewport</span><span class="token punctuation">(</span>elementId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="series-management" tabindex="-1"><a class="header-anchor" href="#series-management"><span>Series Management</span></a></h3><p>The store tracks series data, including image identifiers, caching status, and loading progress.</p><p>To add a set of imageIds to the store, use the <code>addImageIds</code> function with the uniqueUID and imageIds:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;larvitar&#39;</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">addImageIds</span><span class="token punctuation">(</span>uniqueUID<span class="token punctuation">,</span> imageIds<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>To remove set of imageIds from the store, use the <code>removeImageIds</code> function with the uniqueUID:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;larvitar&#39;</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">removeImageIds</span><span class="token punctuation">(</span>uniqueUID<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>To remove all imageIds from the store, use the <code>resetImageIds</code> function:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;larvitar&#39;</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">resetImageIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useful-functions" tabindex="-1"><a class="header-anchor" href="#useful-functions"><span>Useful functions</span></a></h3><p>The store provides several utility functions for managing data:</p><table><thead><tr><th>Function</th><th>Parameters</th><th>Description</th></tr></thead><tbody><tr><td><code>setSliceId</code></td><td><code>elementId</code>, <code>imageIndex</code></td><td>Sets the slice ID for the viewport identified by elementId.</td></tr><tr><td><code>setPendingSliceId</code></td><td><code>elementId</code>, <code>timeIndex</code></td><td>Sets the pending slice ID for the viewport identified by elementId.</td></tr><tr><td><code>setMaxSliceId</code></td><td><code>elementId</code>, <code>imageIndex</code></td><td>Sets the max Slice ID for the viewport identified by elementId.</td></tr><tr><td><code>setTimeId</code></td><td><code>elementId</code>, <code>timeIndex</code></td><td>Sets the time ID for the viewport identified by elementId.</td></tr><tr><td><code>setDSAEnabled</code></td><td><code>elementId</code>, <code>enabled</code></td><td>Sets the DSA mode for the viewport identified by elementId.</td></tr><tr><td><code>setDSAPixelShift</code></td><td><code>elementId</code>, <code>pixelShift</code></td><td>Sets the DSA pixel shift for the viewport identified by elementId.</td></tr><tr><td><code>ResetActiveTools</code></td><td><code>elementId</code></td><td>Resets the active tools.</td></tr></tbody></table><p><br></p><div style="text-align:center;"><img src="https://press.r1-it.storage.cloud.it/logo_trasparent.png" alt="D/Vision Lab" height="200"></div>`,39)]))}const c=t(a,[["render",o],["__file","store.html.vue"]]),l=JSON.parse('{"path":"/api/modules/store.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"The Larvitar Store","slug":"the-larvitar-store","link":"#the-larvitar-store","children":[{"level":3,"title":"Core Responsibilities","slug":"core-responsibilities","link":"#core-responsibilities","children":[]},{"level":3,"title":"Store Structure","slug":"store-structure","link":"#store-structure","children":[]},{"level":3,"title":"Initialization","slug":"initialization","link":"#initialization","children":[]},{"level":3,"title":"Viewport Management","slug":"viewport-management","link":"#viewport-management","children":[]},{"level":3,"title":"Series Management","slug":"series-management","link":"#series-management","children":[]},{"level":3,"title":"Useful functions","slug":"useful-functions","link":"#useful-functions","children":[]}]}],"git":{"updatedTime":1759672351000,"contributors":[{"name":"Laura Borghesi","username":"Laura Borghesi","email":"146220917+laura-borghesi-lum00n@users.noreply.github.com","commits":1,"url":"https://github.com/Laura Borghesi"}]},"filePathRelative":"api/modules/store.md","excerpt":"<div style=\\"text-align: center;\\">\\n    <img src=\\"https://assets.pokemon.com/assets/cms2/img/pokedex/full/246.png\\" alt=\\"Larvitar\\" height=\\"200\\">\\n</div>\\n<h2>The Larvitar Store</h2>\\n<p>The Larvitar Store is a centralized data configuration store that manages the state and settings required for the application. It keeps track of information related to tools, series, viewports, and other imaging-related data, enabling dynamic interaction with the viewer.</p>"}');export{c as comp,l as data};
